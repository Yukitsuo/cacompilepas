{"ast":null,"code":"import _slicedToArray from \"/usr/src/app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/usr/src/app/client/src/Request.js\";\nimport React, { useState } from 'react';\n\nconst Request = props => {\n  const domain = 'http://localhost:80';\n  let route = '/';\n\n  if (undefined !== props.route.split(/\\//)[1]) {\n    route += '?module=' + props.route.split(/\\//)[1];\n\n    if (undefined !== props.route.split(/\\//)[2]) {\n      route += '&action=' + props.route.split(/\\//)[2];\n\n      if (undefined !== props.route.split(/\\//)[3]) {\n        route += '&param=' + props.route.split(/\\//)[3];\n      }\n    }\n  }\n\n  const method = props.method;\n  const data = props.data;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        JSONResponse = _useState2[0],\n        setResponse = _useState2[1];\n\n  fetch(domain + route, {\n    method: method,\n    headers: 'POST' === method ? {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    } : null,\n    body: 'POST' === method ? JSON.stringify(data) : null\n  }).then(response => response.json()).then(jsonResponse => {\n    JSONResponse = jsonResponse;\n    displatch(JSONResponse);\n    console.log('conn', connected);\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Connected: \", connected, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Vous avez cliqu\\xE9 \", count, \" fois\"));\n  }).catch(networkError => console.log(networkError));\n};\n\nexport default Request;","map":{"version":3,"sources":["/usr/src/app/client/src/Request.js"],"names":["React","useState","Request","props","domain","route","undefined","split","method","data","JSONResponse","setResponse","fetch","headers","body","JSON","stringify","then","response","json","jsonResponse","displatch","console","log","connected","count","catch","networkError"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAMC,MAAM,GAAG,qBAAf;AACA,MAAIC,KAAK,GAAG,GAAZ;;AACA,MAAIC,SAAS,KAAKH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAlB,EAA8C;AAC5CF,IAAAA,KAAK,IAAI,aAAaF,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAtB;;AACA,QAAID,SAAS,KAAKH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAlB,EAA8C;AAC5CF,MAAAA,KAAK,IAAI,aAAaF,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAtB;;AACA,UAAID,SAAS,KAAKH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAlB,EAA8C;AAC5CF,QAAAA,KAAK,IAAI,YAAYF,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAArB;AACD;AACF;AACF;;AACD,QAAMC,MAAM,GAAGL,KAAK,CAACK,MAArB;AACA,QAAMC,IAAI,GAAGN,KAAK,CAACM,IAAnB;;AAbyB,oBAcWR,QAAQ,CAAC,IAAD,CAdnB;AAAA;AAAA,QAclBS,YAdkB;AAAA,QAcJC,WAdI;;AAezBC,EAAAA,KAAK,CAACR,MAAM,GAAGC,KAAV,EAAiB;AACpBG,IAAAA,MAAM,EAAEA,MADY;AAEpBK,IAAAA,OAAO,EAAE,WAAWL,MAAX,GAAoB;AAC3B,gBAAU,kBADiB;AAE3B,sBAAgB;AAFW,KAApB,GAGL,IALgB;AAMpBM,IAAAA,IAAI,EAAE,WAAWN,MAAX,GAAoBO,IAAI,CAACC,SAAL,CAAeP,IAAf,CAApB,GAA2C;AAN7B,GAAjB,CAAL,CAQCQ,IARD,CAQMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARlB,EASCF,IATD,CASMG,YAAY,IAAI;AACpBV,IAAAA,YAAY,GAAGU,YAAf;AACAC,IAAAA,SAAS,CAACX,YAAD,CAAT;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,SAApB;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgBA,SAAhB,EAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsBC,KAAtB,UAA1B,CAAP;AACD,GAdD,EAeCC,KAfD,CAeOC,YAAY,IAAIL,OAAO,CAACC,GAAR,CAAYI,YAAZ,CAfvB;AAgBD,CA/BD;;AAiCA,eAAezB,OAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst Request = (props) => {\n  const domain = 'http://localhost:80';\n  let route = '/';\n  if (undefined !== props.route.split(/\\//)[1]) {\n    route += '?module=' + props.route.split(/\\//)[1];\n    if (undefined !== props.route.split(/\\//)[2]) {\n      route += '&action=' + props.route.split(/\\//)[2];\n      if (undefined !== props.route.split(/\\//)[3]) {\n        route += '&param=' + props.route.split(/\\//)[3];\n      }\n    }\n  }\n  const method = props.method;\n  const data = props.data;\n  const [JSONResponse, setResponse] = useState(null);\n  fetch(domain + route, {\n    method: method,\n    headers: 'POST' === method ? {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    } : null,\n    body: 'POST' === method ? JSON.stringify(data) : null\n  })\n  .then(response => response.json())\n  .then(jsonResponse => {\n    JSONResponse = jsonResponse;\n    displatch(JSONResponse);\n    console.log('conn', connected);\n    return <h1>Connected: {connected}<h2>Vous avez cliqu√© {count} fois</h2></h1>;\n  })\n  .catch(networkError => console.log(networkError));\n}\n\nexport default Request;"]},"metadata":{},"sourceType":"module"}