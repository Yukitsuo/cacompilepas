{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/General/SearchBar.tsx\";\nimport React from 'react';\nimport Hashtag from \"./Hashtag\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputIsNotEmpty: true,\n      hashtags: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      })\n    };\n    this.emptyInput = this.emptyInput.bind(this);\n    this.updateHashtags = this.updateHashtags.bind(this);\n  }\n\n  emptyInput(isEmpty) {\n    this.setState({\n      inputIsNotEmpty: isEmpty\n    });\n  }\n\n  updateHashtags(hashtags) {\n    this.setState({\n      hashtags: hashtags\n    });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-inline my-lg-0 my-md-0 my-sm-2 my-xs-2 col-lg-5 col-md-5 col-sm-6 col-xs-6 offset-lg-1 offset-md-1 offset-sm-0 offset-xs-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      id: \"search-icon\",\n      htmlFor: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"glyphicon glyphicon-search search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"search-placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, this.state.inputIsNotEmpty ? 'Search...' : '')), React.createElement(HashtagInput, {\n      id: 'search',\n      className: 'form-control col-lg-12 w-75 mr-sm-2',\n      type: 'search',\n      onUpdate: this.emptyInput,\n      updateHashtags: this.updateHashtags,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass HashtagInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.input = void 0;\n    this.state = {\n      text: '',\n      hashtags: [],\n      widths: [],\n      totalWidth: 0\n    };\n    this.input = React.createRef();\n    this.init();\n  }\n\n  init() {\n    this.write = this.write.bind(this);\n    this.renderHashtags = this.renderHashtags.bind(this);\n    this.addHashtag = this.addHashtag.bind(this);\n    this.deleteHashtag = this.deleteHashtag.bind(this);\n    this.updateHashtags = this.updateHashtags.bind(this);\n    this.updateIndent = this.updateIndent.bind(this);\n    this.updateTotalWidth = this.updateTotalWidth.bind(this);\n  }\n\n  write(event) {\n    this.setState({\n      text: event.target.value\n    }); // @ts-ignore\n\n    if ('' === this.input.current.value && 0 === this.state.hashtags.length) {\n      this.props.onUpdate(true);\n    } else {\n      this.props.onUpdate(false);\n    }\n  }\n\n  componentDidMount() {\n    this.updateIndent();\n  }\n\n  updateIndent() {\n    this.forceUpdate(() => {\n      let x = 0 === this.state.totalWidth ? 14 : 10 + this.state.totalWidth - (this.state.hashtags.length - 1) * 10; // @ts-ignore\n\n      this.input.current.style.textIndent = x + 'px'; // @ts-ignore\n\n      this.input.current.value = this.state.text;\n    });\n  }\n\n  addHashtag(text) {\n    if (!this.state.hashtags.includes(text)) {\n      this.state.hashtags.push(text);\n      this.state.widths.push(0);\n      this.setState({\n        text: ''\n      }); // @ts-ignore\n\n      this.forceUpdate(() => this.input.current.value = '');\n      this.updateIndent();\n    }\n  }\n\n  deleteHashtag() {\n    this.state.hashtags.pop();\n    this.state.widths.pop();\n    this.setState((state, props) => {\n      return {\n        totalWidth: 0 === state.widths.length ? 0 : state.widths.map(width => width).reduce((width, nextWidth) => width + nextWidth)\n      };\n    });\n    this.updateIndent();\n  }\n\n  async updateHashtags(event) {\n    if (13 === event.keyCode) {\n      event.preventDefault(); // @ts-ignore\n\n      this.addHashtag(event.target.value);\n    } else if (8 === event.keyCode) {\n      // @ts-ignore\n      if ('' === this.input.current.value && 0 !== this.state.hashtags.length) {\n        event.preventDefault();\n        this.deleteHashtag();\n      }\n    }\n\n    this.props.updateHashtags(this.renderHashtags());\n  }\n\n  updateTotalWidth(text, hashtagBoxWidth) {\n    this.setState((state, props) => {\n      state.widths[this.state.hashtags.indexOf(text)] = hashtagBoxWidth;\n      return {\n        totalWidth: state.widths.map(width => width).reduce((width, nextWidth) => width + nextWidth)\n      };\n    }, () => document.getElementById('search').value = '');\n    this.updateIndent();\n  }\n\n  renderHashtags() {\n    const res = this.state.hashtags.map(hashtag => React.createElement(Hashtag, {\n      key: hashtag,\n      text: hashtag,\n      updateWidth: this.updateTotalWidth,\n      remove: this.deleteHashtag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }));\n    return res;\n  }\n\n  render() {\n    return (// {this.renderHashtags()}\n      React.createElement(\"input\", {\n        id: this.props.id // search\n        ,\n        className: this.props.className // \"form-control col-lg-12 w-75 mr-sm-2\"\n        ,\n        type: this.props.type // search\n        ,\n        \"aria-label\": \"Search\",\n        onChange: event => this.write(event),\n        value: this.state.text,\n        onKeyDown: this.updateHashtags,\n        ref: this.input,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })\n    );\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/usr/src/app/client/src/View/General/SearchBar.tsx"],"names":["React","Hashtag","SearchBar","Component","constructor","props","state","inputIsNotEmpty","hashtags","emptyInput","bind","updateHashtags","isEmpty","setState","render","HashtagInput","input","text","widths","totalWidth","createRef","init","write","renderHashtags","addHashtag","deleteHashtag","updateIndent","updateTotalWidth","event","target","value","current","length","onUpdate","componentDidMount","forceUpdate","x","style","textIndent","includes","push","pop","map","width","reduce","nextWidth","keyCode","preventDefault","hashtagBoxWidth","indexOf","document","getElementById","res","hashtag","id","className","type"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, ReactNode, Ref} from 'react';\nimport Request from \"../../API/Request\";\nimport Hashtag from \"./Hashtag\";\n\ninterface SearchBarState {\n    inputIsNotEmpty: boolean,\n    hashtags: ReactNode,\n}\n\nclass SearchBar extends React.Component<any, SearchBarState> {\n\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            inputIsNotEmpty: true,\n            hashtags: <div></div>,\n        }\n        this.emptyInput = this.emptyInput.bind(this);\n        this.updateHashtags = this.updateHashtags.bind(this);\n    }\n\n    public emptyInput(isEmpty: boolean): void {\n        this.setState({inputIsNotEmpty: isEmpty});\n    }\n\n    public updateHashtags(hashtags: ReactNode): void {\n        this.setState({hashtags: hashtags});\n    }\n\n    public render(): ReactNode {\n        return (\n            <form\n                className=\"form-inline my-lg-0 my-md-0 my-sm-2 my-xs-2 col-lg-5 col-md-5 col-sm-6 col-xs-6 offset-lg-1 offset-md-1 offset-sm-0 offset-xs-0\">\n                <label id=\"search-icon\" htmlFor=\"search\">\n                    <span className=\"glyphicon glyphicon-search search-icon\"></span>\n                    <span\n                        id=\"search-placeholder\">{this.state.inputIsNotEmpty ? 'Search...' : ''}</span>\n                </label>\n                <HashtagInput\n                    id={'search'}\n                    className={'form-control col-lg-12 w-75 mr-sm-2'}\n                    type={'search'}\n                    onUpdate={this.emptyInput}\n                    updateHashtags={this.updateHashtags}\n                />\n            </form>\n        );\n    }\n}\n\ninterface HashtagInputProps {\n    id: string,\n    className: string,\n    type: string,\n    onUpdate: any,\n    updateHashtags: any,\n}\n\ninterface HashTagInputState {\n    text: string,\n    hashtags: string[],\n    widths: number[],\n    totalWidth: number,\n}\n\nclass HashtagInput extends React.Component<HashtagInputProps, HashTagInputState> {\n    private input: Ref<HTMLInputElement>;\n\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            text: '',\n            hashtags: [],\n            widths: [],\n            totalWidth: 0,\n        }\n        this.input = React.createRef();\n        this.init();\n    }\n\n    public init(): void {\n        this.write = this.write.bind(this);\n        this.renderHashtags = this.renderHashtags.bind(this);\n        this.addHashtag = this.addHashtag.bind(this);\n        this.deleteHashtag = this.deleteHashtag.bind(this);\n        this.updateHashtags = this.updateHashtags.bind(this);\n        this.updateIndent = this.updateIndent.bind(this);\n        this.updateTotalWidth = this.updateTotalWidth.bind(this);\n    }\n\n    public write(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({text: event.target.value});\n        // @ts-ignore\n        if ('' === this.input.current.value && 0 === this.state.hashtags.length) {\n            this.props.onUpdate(true);\n        } else {\n            this.props.onUpdate(false);\n        }\n    }\n\n    public componentDidMount(): void {\n        this.updateIndent();\n    }\n\n    public updateIndent(): void {\n        this.forceUpdate(() => {\n            let x: number = 0 === this.state.totalWidth ? 14 : 10 + this.state.totalWidth - ((this.state.hashtags.length - 1) * 10);\n            // @ts-ignore\n            this.input.current.style.textIndent = x + 'px';\n            // @ts-ignore\n            this.input.current.value = this.state.text;\n        });\n    }\n\n    public addHashtag(text: string): void {\n        if (!this.state.hashtags.includes(text)) {\n            this.state.hashtags.push(text);\n            this.state.widths.push(0);\n            this.setState({text: ''});\n            // @ts-ignore\n            this.forceUpdate(() => this.input.current.value = '');\n            this.updateIndent();\n        }\n    }\n\n    public deleteHashtag(): void {\n        this.state.hashtags.pop();\n        this.state.widths.pop();\n        this.setState((state, props) => {\n            return {totalWidth: 0 === state.widths.length ? 0 : state.widths.map((width: number) => width).reduce((width: number, nextWidth: number) => width + nextWidth)};\n        });\n        this.updateIndent();\n    }\n\n    public async updateHashtags(event: React.KeyboardEvent<HTMLInputElement>): Promise<void> {\n        if (13 === event.keyCode) {\n            event.preventDefault();\n            // @ts-ignore\n            this.addHashtag((event as KeyboardEvent).target.value);\n        } else if (8 === event.keyCode) {\n            // @ts-ignore\n            if ('' === this.input.current.value && 0 !== this.state.hashtags.length) {\n                event.preventDefault();\n                this.deleteHashtag();\n            }\n        }\n        this.props.updateHashtags(this.renderHashtags());\n    }\n\n    public updateTotalWidth(text: string, hashtagBoxWidth: number): void {\n        this.setState((state, props) => {\n                state.widths[this.state.hashtags.indexOf(text)] = hashtagBoxWidth;\n                return {totalWidth: state.widths.map((width: number) => width).reduce((width: number, nextWidth: number) => width + nextWidth)}\n            },\n            () => (document.getElementById('search') as HTMLInputElement).value = '');\n        this.updateIndent();\n    }\n\n    public renderHashtags(): ReactNode {\n        const res = this.state.hashtags.map(\n            (hashtag: string) => <Hashtag\n                key={hashtag}\n                text={hashtag}\n                updateWidth={this.updateTotalWidth}\n                remove={this.deleteHashtag}\n            />\n        );\n        return res;\n    }\n\n    public render(): ReactNode {\n        return (\n            // {this.renderHashtags()}\n            <input id={this.props.id} // search\n                   className={this.props.className} // \"form-control col-lg-12 w-75 mr-sm-2\"\n                   type={this.props.type} // search\n                   aria-label=\"Search\"\n                   onChange={event => this.write(event)}\n                   value={this.state.text}\n                   onKeyDown={this.updateHashtags}\n                   ref={this.input}\n            />\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}