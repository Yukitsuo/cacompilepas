{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/General/HashtagInput.tsx\";\nimport React from \"react\";\nimport Hashtag from \"./Hashtag\";\n\nclass HashtagInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.input = void 0;\n    this.state = {\n      text: '',\n      hashtags: [],\n      widths: [],\n      totalWidth: 0\n    };\n    this.input = React.createRef();\n    this.init();\n  }\n\n  init() {\n    this.write = this.write.bind(this);\n    this.renderHashtags = this.renderHashtags.bind(this);\n    this.addHashtag = this.addHashtag.bind(this);\n    this.deleteHashtag = this.deleteHashtag.bind(this);\n    this.updateHashtags = this.updateHashtags.bind(this);\n    this.updateIndent = this.updateIndent.bind(this);\n    this.updateTotalWidth = this.updateTotalWidth.bind(this);\n    this.deleteHashtagByClick = this.deleteHashtagByClick.bind(this);\n    this.updateView = this.updateView.bind(this);\n  }\n\n  write(event) {\n    this.setState({\n      text: event.target.value\n    }); // @ts-ignore\n\n    if ('' === this.input.current.value && 0 === this.state.hashtags.length) {\n      this.props.onUpdate(true);\n    } else {\n      this.props.onUpdate(false);\n    }\n\n    this.props.updateHashtagsView(this.renderHashtags());\n    this.props.updateHashtags(this.state.hashtags);\n  }\n\n  componentDidMount() {\n    this.updateIndent();\n  }\n\n  updateIndent() {\n    this.forceUpdate(() => {\n      let x = 0 === this.state.totalWidth ? this.props.baseIndent : this.props.baseIndent - 3 + this.state.totalWidth - (this.state.hashtags.length - 1) * 10; // @ts-ignore\n\n      this.input.current.style.textIndent = x + 'px'; // @ts-ignore\n\n      this.input.current.value = this.state.text;\n    });\n  }\n\n  addHashtag(text) {\n    if (!this.state.hashtags.includes(text) && text.includes('#')) {\n      let tags = text.split(/ /);\n\n      for (let tag of tags) {\n        if ('#' === tag.charAt(0)) {\n          this.state.hashtags.push(text.substr(1, text.length - 1));\n          this.state.widths.push(0);\n          this.setState((state, props) => {\n            return {\n              text: state.text.replace(tag, '')\n            };\n          }); // @ts-ignore\n\n          this.forceUpdate(() => this.input.current.value.replace(tag, ''));\n          this.updateView();\n        }\n      }\n    }\n  }\n\n  updateView() {\n    this.setState((state, props) => {\n      return {\n        totalWidth: 0 === state.widths.length ? 0 : state.widths.map(width => width).reduce((width, nextWidth) => width + nextWidth)\n      };\n    });\n    this.updateIndent();\n    this.props.updateHashtagsView(this.renderHashtags());\n  }\n\n  deleteHashtagByClick(event) {\n    let content;\n    let target = event.target;\n\n    if (undefined === target.parentElement.firstElementChild.innerText) {\n      content = target.parentElement.parentElement.parentElement.firstElementChild.innerText;\n\n      if ('' === content) {\n        content = target.parentElement.parentElement.parentElement.parentElement.firstElementChild.firstElementChild.innerText;\n\n        if ('' === content) {\n          content = target.parentElement.parentElement.firstElementChild.innerText;\n        }\n      }\n    } else {\n      content = target.parentElement.firstElementChild.innerText;\n    }\n\n    content = content.substr(1, content.length - 1);\n    let index = this.state.hashtagsView.indexOf(content);\n    this.state.hashtags.splice(index, 1);\n    this.state.widths.splice(index, 1);\n    this.updateView();\n  }\n\n  deleteHashtag(text) {\n    let index = this.state.hashtagsView.indexOf(text);\n    this.state.hashtags.splice(index, 1);\n    this.state.widths.splice(index, 1);\n    this.updateView();\n  }\n\n  async updateHashtags(event) {\n    if (13 === event.keyCode) {\n      event.preventDefault(); // @ts-ignore\n\n      this.addHashtag(event.target.value);\n    } else if (8 === event.keyCode) {\n      // @ts-ignore\n      if ('' === this.input.current.value && 0 !== this.state.hashtags.length) {\n        event.preventDefault();\n        this.deleteHashtag(this.state.hashtags[this.state.hashtags.length - 1]);\n      }\n    }\n\n    this.updateView();\n  }\n\n  updateTotalWidth(text, hashtagBoxWidth) {\n    this.setState((state, props) => {\n      state.widths[this.state.hashtags.indexOf(text)] = hashtagBoxWidth;\n      return {\n        totalWidth: state.widths.map(width => width).reduce((width, nextWidth) => width + nextWidth)\n      };\n    }, () => document.getElementById('search').value = '');\n    this.updateIndent();\n  }\n\n  renderHashtags() {\n    const res = this.state.hashtags.map(hashtag => {\n      return React.createElement(Hashtag, {\n        key: hashtag,\n        text: hashtag,\n        updateWidth: this.updateTotalWidth,\n        remove: this.deleteHashtagByClick,\n        className: this.props.hashtagClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      });\n    });\n    return res;\n  }\n\n  render() {\n    return React.createElement(\"input\", {\n      id: this.props.id,\n      className: this.props.className,\n      type: this.props.type,\n      onChange: event => this.write(event),\n      value: this.state.text,\n      onKeyDown: this.updateHashtags,\n      ref: this.input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default HashtagInput;","map":{"version":3,"sources":["/usr/src/app/client/src/View/General/HashtagInput.tsx"],"names":["React","Hashtag","HashtagInput","Component","constructor","props","input","state","text","hashtags","widths","totalWidth","createRef","init","write","bind","renderHashtags","addHashtag","deleteHashtag","updateHashtags","updateIndent","updateTotalWidth","deleteHashtagByClick","updateView","event","setState","target","value","current","length","onUpdate","updateHashtagsView","componentDidMount","forceUpdate","x","baseIndent","style","textIndent","includes","tags","split","tag","charAt","push","substr","replace","map","width","reduce","nextWidth","content","undefined","parentElement","firstElementChild","innerText","index","hashtagsView","indexOf","splice","keyCode","preventDefault","hashtagBoxWidth","document","getElementById","res","hashtag","hashtagClassName","render","id","className","type"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, ReactNode, Ref} from \"react\";\nimport Hashtag from \"./Hashtag\";\n\ninterface HashtagInputProps {\n    id: string,\n    className: string,\n    type: string,\n    baseIndent: number,\n    onUpdate: any,\n    updateHashtagsView: any,\n    updateHashtags: any,\n    hashtagClassName: string,\n}\n\ninterface HashTagInputState {\n    text: string,\n    hashtags: string[],\n    widths: number[],\n    totalWidth: number,\n}\n\nclass HashtagInput extends React.Component<HashtagInputProps, HashTagInputState> {\n    private input: Ref<HTMLInputElement>;\n\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            text: '',\n            hashtags: [],\n            widths: [],\n            totalWidth: 0,\n        }\n        this.input = React.createRef();\n        this.init();\n    }\n\n    public init(): void {\n        this.write = this.write.bind(this);\n        this.renderHashtags = this.renderHashtags.bind(this);\n        this.addHashtag = this.addHashtag.bind(this);\n        this.deleteHashtag = this.deleteHashtag.bind(this);\n        this.updateHashtags = this.updateHashtags.bind(this);\n        this.updateIndent = this.updateIndent.bind(this);\n        this.updateTotalWidth = this.updateTotalWidth.bind(this);\n        this.deleteHashtagByClick = this.deleteHashtagByClick.bind(this);\n        this.updateView = this.updateView.bind(this);\n    }\n\n    public write(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({text: event.target.value});\n        // @ts-ignore\n        if ('' === this.input.current.value && 0 === this.state.hashtags.length) {\n            this.props.onUpdate(true);\n        } else {\n            this.props.onUpdate(false);\n        }\n        this.props.updateHashtagsView(this.renderHashtags());\n        this.props.updateHashtags(this.state.hashtags);\n    }\n\n    public componentDidMount(): void {\n        this.updateIndent();\n    }\n\n    public updateIndent(): void {\n        this.forceUpdate(() => {\n            let x: number = 0 === this.state.totalWidth ? this.props.baseIndent : this.props.baseIndent - 3 + this.state.totalWidth - ((this.state.hashtags.length - 1) * 10);\n            // @ts-ignore\n            this.input.current.style.textIndent = x + 'px';\n            // @ts-ignore\n            this.input.current.value = this.state.text;\n        });\n    }\n\n    public addHashtag(text: string): void {\n        if (!this.state.hashtags.includes(text) && text.includes('#')) {\n            let tags: string[] = text.split(/ /);\n            for (let tag of tags) {\n                if ('#' === tag.charAt(0)) {\n                    this.state.hashtags.push(text.substr(1, text.length - 1));\n                    this.state.widths.push(0);\n                    this.setState((state, props) => {\n                        return {text: state.text.replace(tag, '')};\n                    });\n                    // @ts-ignore\n                    this.forceUpdate(() => this.input.current.value.replace(tag, ''));\n                    this.updateView();\n                }\n            }\n        }\n    }\n\n    public updateView(): void {\n        this.setState((state, props) => {\n            return {totalWidth: 0 === state.widths.length ? 0 : state.widths.map((width: number) => width).reduce((width: number, nextWidth: number) => width + nextWidth)};\n        });\n        this.updateIndent();\n        this.props.updateHashtagsView(this.renderHashtags());\n    }\n\n    public deleteHashtagByClick(event: React.MouseEvent<HTMLOrSVGElement>): void {\n        let content: string;\n        let target: any = event.target;\n        if (undefined === target.parentElement.firstElementChild.innerText) {\n            content = target.parentElement.parentElement.parentElement.firstElementChild.innerText;\n            if ('' === content) {\n                content = target.parentElement.parentElement.parentElement.parentElement.firstElementChild.firstElementChild.innerText;\n                if ('' === content) {\n                    content = target.parentElement.parentElement.firstElementChild.innerText;\n                }\n            }\n        } else {\n            content = target.parentElement.firstElementChild.innerText;\n        }\n        content = content.substr(1, content.length - 1);\n        let index: number = this.state.hashtagsView.indexOf(content);\n        this.state.hashtags.splice(index, 1);\n        this.state.widths.splice(index, 1);\n        this.updateView();\n    }\n\n    public deleteHashtag(text: string): void {\n        let index: number = this.state.hashtagsView.indexOf(text);\n        this.state.hashtags.splice(index, 1);\n        this.state.widths.splice(index, 1);\n        this.updateView();\n    }\n\n    public async updateHashtags(event: React.KeyboardEvent<HTMLInputElement>): Promise<void> {\n        if (13 === event.keyCode) {\n            event.preventDefault();\n            // @ts-ignore\n            this.addHashtag((event as KeyboardEvent).target.value);\n        } else if (8 === event.keyCode) {\n            // @ts-ignore\n            if ('' === this.input.current.value && 0 !== this.state.hashtags.length) {\n                event.preventDefault();\n                this.deleteHashtag(this.state.hashtags[this.state.hashtags.length - 1]);\n            }\n        }\n        this.updateView();\n    }\n\n    public updateTotalWidth(text: string, hashtagBoxWidth: number): void {\n        this.setState((state, props) => {\n                state.widths[this.state.hashtags.indexOf(text)] = hashtagBoxWidth;\n                return {totalWidth: state.widths.map((width: number) => width).reduce((width: number, nextWidth: number) => width + nextWidth)}\n            },\n            () => (document.getElementById('search') as HTMLInputElement).value = '');\n        this.updateIndent();\n    }\n\n    public renderHashtags(): ReactNode {\n        const res = this.state.hashtags.map(\n            (hashtag: string) => {\n                return <Hashtag\n                    key={hashtag}\n                    text={hashtag}\n                    updateWidth={this.updateTotalWidth}\n                    remove={this.deleteHashtagByClick}\n                    className={this.props.hashtagClassName}\n                />\n            }\n        );\n        return res;\n    }\n\n    public render(): ReactNode {\n        return (\n            <input id={this.props.id}\n                   className={this.props.className}\n                   type={this.props.type}\n                   onChange={event => this.write(event)}\n                   value={this.state.text}\n                   onKeyDown={this.updateHashtags}\n                   ref={this.input}\n            />\n        );\n    }\n}\n\nexport default HashtagInput;\n"]},"metadata":{},"sourceType":"module"}