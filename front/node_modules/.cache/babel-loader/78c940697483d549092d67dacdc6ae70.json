{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/Lobby/Messages.tsx\";\nimport React from 'react';\nimport Request from \"../../API/Request\";\nimport Message from \"./Message\";\n\nclass Messages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: []\n    };\n    this.renderMessage = this.renderMessage.bind(this);\n    this.renderMessages = this.renderMessages.bind(this);\n    this.fillMessages = this.fillMessages.bind(this);\n    this.setState = this.setState.bind(this);\n  }\n\n  componentDidMount() {\n    new Request('/lobby/messages/' + this.props.id, 'POST', 'json', {\n      token: localStorage.getItem('token')\n    }, this.fillMessages);\n  }\n\n  fillMessages(data) {\n    this.setState({\n      messages: data\n    });\n  }\n\n  renderMessage(key, content, send_date, pseudo) {\n    return React.createElement(Message, {\n      key: key,\n      content: content,\n      send_date: send_date,\n      pseudo: pseudo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  }\n\n  renderMessages() {\n    // @ts-ignore\n    if (undefined === this.state.messages['message']) {\n      let res = [],\n          i = 0;\n\n      for (let message of this.state.messages) {\n        res.push(this.renderMessage(i.toString(), message['content'], message['send_date'], message['pseudo']));\n        i++;\n      }\n\n      return res;\n    } else {\n      return [];\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"col-lg-6 col-md-6 col-sm-12 col-xs-12 pl-lg-0 pl-sm-0 pr-lg-5 mt-lg-3 mt-sm-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"messages-list list-unstyled\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.renderMessages()));\n  }\n\n}\n\nexport default Messages;","map":{"version":3,"sources":["/usr/src/app/client/src/View/Lobby/Messages.tsx"],"names":["React","Request","Message","Messages","Component","constructor","props","state","messages","renderMessage","bind","renderMessages","fillMessages","setState","componentDidMount","id","token","localStorage","getItem","data","key","content","send_date","pseudo","undefined","res","i","message","push","toString","render"],"mappings":";AAAA,OAAOA,KAAP,MAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAyE;AAC9DC,EAAAA,WAAP,CAAmBC,KAAnB,EAA+B;AAC3B,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAGA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,QAAL,GAAgB,KAAKA,QAAL,CAAcH,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEMI,EAAAA,iBAAP,GAAiC;AAC7B,QAAIb,OAAJ,CAAY,qBAAqB,KAAKK,KAAL,CAAWS,EAA5C,EAAgD,MAAhD,EAAwD,MAAxD,EAAgE;AAACC,MAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB;AAAR,KAAhE,EAAwG,KAAKN,YAA7G;AACH;;AAEMA,EAAAA,YAAP,CAAoBO,IAApB,EAAqC;AACjC,SAAKN,QAAL,CAAc;AAACL,MAAAA,QAAQ,EAAEW;AAAX,KAAd;AACH;;AAEMV,EAAAA,aAAP,CAAqBW,GAArB,EAAkCC,OAAlC,EAAmDC,SAAnD,EAAsEC,MAAtE,EAAiG;AAC7F,WAAO,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEH,GAAd;AAAmB,MAAA,OAAO,EAAEC,OAA5B;AAAqC,MAAA,SAAS,EAAEC,SAAhD;AAA2D,MAAA,MAAM,EAAEC,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAEMZ,EAAAA,cAAP,GAAmD;AAC/C;AACA,QAAIa,SAAS,KAAK,KAAKjB,KAAL,CAAWC,QAAX,CAAoB,SAApB,CAAlB,EAAkD;AAC9C,UAAIiB,GAAG,GAAG,EAAV;AAAA,UAAcC,CAAC,GAAG,CAAlB;;AACA,WAAK,IAAIC,OAAT,IAAoB,KAAKpB,KAAL,CAAWC,QAA/B,EAAyC;AACrCiB,QAAAA,GAAG,CAACG,IAAJ,CAAS,KAAKnB,aAAL,CAAmBiB,CAAC,CAACG,QAAF,EAAnB,EAAiCF,OAAO,CAAC,SAAD,CAAxC,EAAqDA,OAAO,CAAC,WAAD,CAA5D,EAA2EA,OAAO,CAAC,QAAD,CAAlF,CAAT;AACAD,QAAAA,CAAC;AACJ;;AACD,aAAOD,GAAP;AACH,KAPD,MAOO;AACH,aAAO,EAAP;AACH;AACJ;;AAEMK,EAAAA,MAAP,GAA2B;AACvB,WACI;AAAK,MAAA,SAAS,EAAC,+EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnB,cAAL,EADL,CADJ,CADJ;AAOH;;AA9CoE;;AAiDzE,eAAeR,QAAf","sourcesContent":["import React, {ReactNode} from 'react';\nimport Request from \"../../API/Request\";\nimport Message from \"./Message\";\n\nclass Messages extends React.Component<{ id: string }, { messages: [] }> {\n    public constructor(props: any) {\n        super(props);\n        this.state = {\n            messages: [],\n        }\n        this.renderMessage = this.renderMessage.bind(this);\n        this.renderMessages = this.renderMessages.bind(this);\n        this.fillMessages = this.fillMessages.bind(this);\n        this.setState = this.setState.bind(this);\n    }\n\n    public componentDidMount(): void {\n        new Request('/lobby/messages/' + this.props.id, 'POST', 'json', {token: localStorage.getItem('token')}, this.fillMessages);\n    }\n\n    public fillMessages(data: any): void {\n        this.setState({messages: data});\n    }\n\n    public renderMessage(key: string, content: string, send_date: string, pseudo: string): ReactNode {\n        return <Message key={key} content={content} send_date={send_date} pseudo={pseudo}/>;\n    }\n\n    public renderMessages(): ({} | null | undefined)[] {\n        // @ts-ignore\n        if (undefined === this.state.messages['message']) {\n            let res = [], i = 0;\n            for (let message of this.state.messages) {\n                res.push(this.renderMessage(i.toString(), message['content'], message['send_date'], message['pseudo']));\n                i++;\n            }\n            return res;\n        } else {\n            return [];\n        }\n    }\n\n    public render(): ReactNode {\n        return (\n            <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12 pl-lg-0 pl-sm-0 pr-lg-5 mt-lg-3 mt-sm-4\">\n                <ul className=\"messages-list list-unstyled\">\n                    {this.renderMessages()}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}