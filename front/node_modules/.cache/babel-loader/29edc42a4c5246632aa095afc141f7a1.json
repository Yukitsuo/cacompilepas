{"ast":null,"code":"import _slicedToArray from \"/usr/src/app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/usr/src/app/client/src/Request.js\";\nimport React, { useState } from 'react';\n\nconst Request = props => {\n  const domain = 'http://localhost:80';\n  let route = '/';\n\n  if (undefined !== props.route.split(/\\//)[1]) {\n    route += '?module=' + props.route.split(/\\//)[1];\n\n    if (undefined !== props.route.split(/\\//)[2]) {\n      route += '&action=' + props.route.split(/\\//)[2];\n\n      if (undefined !== props.route.split(/\\//)[3]) {\n        route += '&param=' + props.route.split(/\\//)[3];\n      }\n    }\n  }\n\n  const method = props.method;\n  const data = props.data;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        connected = _useState2[0],\n        setConnected = _useState2[1];\n\n  console.log(data);\n  let JSONResponse = null;\n  console.log('route', domain + route);\n  fetch(domain + route, {\n    method: method,\n    headers: 'POST' === method ? {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    } : null,\n    body: 'POST' === method ? JSON.stringify(data) : null\n  }).then(response => response.json()).then(jsonResponse => {\n    JSONResponse = jsonResponse;\n    console.log(JSONResponse);\n    setConnected(true);\n  }).catch(networkError => console.log(networkError));\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, this.state.connected);\n};\n\nexport default Request;","map":{"version":3,"sources":["/usr/src/app/client/src/Request.js"],"names":["React","useState","Request","props","domain","route","undefined","split","method","data","connected","setConnected","console","log","JSONResponse","fetch","headers","body","JSON","stringify","then","response","json","jsonResponse","catch","networkError","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,QAAMC,MAAM,GAAG,qBAAf;AACA,MAAIC,KAAK,GAAG,GAAZ;;AACA,MAAIC,SAAS,KAAKH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAlB,EAA8C;AAC5CF,IAAAA,KAAK,IAAI,aAAaF,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAtB;;AACA,QAAID,SAAS,KAAKH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAlB,EAA8C;AAC5CF,MAAAA,KAAK,IAAI,aAAaF,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAtB;;AACA,UAAID,SAAS,KAAKH,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAlB,EAA8C;AAC5CF,QAAAA,KAAK,IAAI,YAAYF,KAAK,CAACE,KAAN,CAAYE,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAArB;AACD;AACF;AACF;;AACD,QAAMC,MAAM,GAAGL,KAAK,CAACK,MAArB;AACA,QAAMC,IAAI,GAAGN,KAAK,CAACM,IAAnB;;AAbyB,oBAcSR,QAAQ,CAAC,KAAD,CAdjB;AAAA;AAAA,QAclBS,SAdkB;AAAA,QAcPC,YAdO;;AAezBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,MAAIK,YAAY,GAAG,IAAnB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBT,MAAM,GAAGC,KAA9B;AACAU,EAAAA,KAAK,CAACX,MAAM,GAAGC,KAAV,EAAiB;AACpBG,IAAAA,MAAM,EAAEA,MADY;AAEpBQ,IAAAA,OAAO,EAAE,WAAWR,MAAX,GAAoB;AAC3B,gBAAU,kBADiB;AAE3B,sBAAgB;AAFW,KAApB,GAGL,IALgB;AAMpBS,IAAAA,IAAI,EAAE,WAAWT,MAAX,GAAoBU,IAAI,CAACC,SAAL,CAAeV,IAAf,CAApB,GAA2C;AAN7B,GAAjB,CAAL,CAQCW,IARD,CAQMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARlB,EASCF,IATD,CASMG,YAAY,IAAI;AACpBT,IAAAA,YAAY,GAAGS,YAAf;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACAH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAbD,EAcCa,KAdD,CAcOC,YAAY,IAAIb,OAAO,CAACC,GAAR,CAAYY,YAAZ,CAdvB;AAeA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAO,KAAKC,KAAL,CAAWhB,SAAlB,CAAP;AACD,CAlCD;;AAoCA,eAAeR,OAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst Request = (props) => {\n  const domain = 'http://localhost:80';\n  let route = '/';\n  if (undefined !== props.route.split(/\\//)[1]) {\n    route += '?module=' + props.route.split(/\\//)[1];\n    if (undefined !== props.route.split(/\\//)[2]) {\n      route += '&action=' + props.route.split(/\\//)[2];\n      if (undefined !== props.route.split(/\\//)[3]) {\n        route += '&param=' + props.route.split(/\\//)[3];\n      }\n    }\n  }\n  const method = props.method;\n  const data = props.data;\n  const [connected, setConnected] = useState(false);\n  console.log(data);\n  let JSONResponse = null;\n  console.log('route', domain + route);\n  fetch(domain + route, {\n    method: method,\n    headers: 'POST' === method ? {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    } : null,\n    body: 'POST' === method ? JSON.stringify(data) : null\n  })\n  .then(response => response.json())\n  .then(jsonResponse => {\n    JSONResponse = jsonResponse;\n    console.log(JSONResponse);\n    setConnected(true);\n  })\n  .catch(networkError => console.log(networkError));\n  return <div>{ this.state.connected }</div>;\n}\n\nexport default Request;"]},"metadata":{},"sourceType":"module"}