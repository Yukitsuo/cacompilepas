{"ast":null,"code":"class Request {\n  constructor(beautifulRoute, updateFunction = result => console.log(result), method = 'GET', data = {}, type = 'json', returnType = 'json') {\n    this.route = void 0;\n    this.method = void 0;\n    this.type = void 0;\n    this.data = void 0;\n    this.domain = void 0;\n    this.beautifulRoute = void 0;\n    this.headers = void 0;\n    this.body = void 0;\n    this.requestInit = void 0;\n    this.response = void 0;\n    this.updateFunction = void 0;\n    this.returnType = void 0;\n    this.beautifulRoute = beautifulRoute;\n    this.route = '/';\n    this.method = method;\n    this.domain = 'http://localhost:80';\n    this.type = type;\n    this.data = data;\n    this.initRoute();\n    this.sendRequest();\n    this.headers = {};\n    this.body = '';\n    this.requestInit = {}; // @ts-ignore\n\n    this.response = {\n      jsonBody: null\n    };\n    this.updateFunction = updateFunction;\n    this.returnType = returnType;\n    this.updateFunction = this.updateFunction.bind(this);\n  }\n\n  initRoute() {\n    if (undefined !== this.beautifulRoute.split(/\\//)[1]) {\n      this.route += '?module=' + this.beautifulRoute.split(/\\//)[1];\n\n      if (undefined !== this.beautifulRoute.split(/\\//)[2]) {\n        this.route += '&action=' + this.beautifulRoute.split(/\\//)[2];\n\n        if (undefined !== this.beautifulRoute.split(/\\//)[3]) {\n          this.route += '&param=' + this.beautifulRoute.split(/\\//)[3];\n        }\n      }\n    }\n  }\n\n  sendRequest() {\n    switch (this.method) {\n      case 'POST':\n      case 'GET':\n        this.headers = undefined !== localStorage.getItem('token') && '' !== localStorage.getItem('token') ? {\n          'Accept': this.type,\n          'Authorization': 'Bearer ' + localStorage.getItem('token')\n        } : {\n          'Accept': this.type\n        };\n        break;\n    }\n\n    let body;\n\n    if ('GET' !== this.method) {\n      if (null === this.data) {\n        body = null;\n      } else {\n        body = this.type === 'json' ? JSON.stringify(this.data) : this.data;\n      }\n\n      this.requestInit = {\n        headers: this.headers,\n        method: this.method,\n        body: body\n      };\n    } else {\n      this.requestInit = {\n        headers: this.headers,\n        method: this.method\n      };\n    }\n\n    fetch(this.domain + this.route, this.requestInit).then(res => {\n      this.response = res;\n\n      switch (this.returnType) {\n        case 'json':\n          return res.json();\n\n        case 'blob':\n          console.log('blob');\n          console.log(res);\n          return res.blob();\n\n        default:\n          return res.json();\n      }\n    }).then(jsonResponse => {\n      if (this.response.ok) {\n        this.response.jsonBody = jsonResponse;\n        this.updateFunction(this.response.jsonBody);\n      } else {\n        throw new Error('Bad response');\n      }\n    }).catch(syntaxError => syntaxError).catch(networkError => networkError);\n  }\n\n}\n\nexport default Request;","map":{"version":3,"sources":["/usr/src/app/client/src/API/Request.tsx"],"names":["Request","constructor","beautifulRoute","updateFunction","result","console","log","method","data","type","returnType","route","domain","headers","body","requestInit","response","initRoute","sendRequest","jsonBody","bind","undefined","split","localStorage","getItem","JSON","stringify","fetch","then","res","json","blob","jsonResponse","ok","Error","catch","syntaxError","networkError"],"mappings":"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","sourcesContent":["interface RequestProps {\n    domain: string;\n    method: string;\n    route: string;\n    data: any;\n}\n\ninterface IHttpResponse<T> extends Response {\n    jsonBody?: T;\n}\n\nclass Request<T> {\n    private route: string;\n    private readonly method: string;\n    private readonly type: string;\n    private readonly data: string;\n    private readonly domain: string;\n    private beautifulRoute: string;\n    private headers: HeadersInit;\n    private body: BodyInit;\n    private requestInit: RequestInit;\n    private response: IHttpResponse<T>;\n    private updateFunction: any;\n    private returnType: string;\n\n    constructor(beautifulRoute: string, updateFunction: any = (result: any) => console.log(result), method: string = 'GET', data: any = {}, type: string = 'json', returnType: string = 'json') {\n        this.beautifulRoute = beautifulRoute;\n        this.route = '/';\n        this.method = method;\n        this.domain = 'http://localhost:80';\n        this.type = type;\n        this.data = data;\n        this.initRoute();\n        this.sendRequest();\n        this.headers = {};\n        this.body = '';\n        this.requestInit = {};\n        // @ts-ignore\n        this.response = {jsonBody: null};\n        this.updateFunction = updateFunction;\n        this.returnType = returnType;\n        this.updateFunction = this.updateFunction.bind(this);\n    }\n\n    public initRoute(): void {\n        if (undefined !== this.beautifulRoute.split(/\\//)[1]) {\n            this.route += '?module=' + this.beautifulRoute.split(/\\//)[1];\n            if (undefined !== this.beautifulRoute.split(/\\//)[2]) {\n                this.route += '&action=' + this.beautifulRoute.split(/\\//)[2];\n                if (undefined !== this.beautifulRoute.split(/\\//)[3]) {\n                    this.route += '&param=' + this.beautifulRoute.split(/\\//)[3];\n                }\n            }\n        }\n    }\n\n    public sendRequest(): void {\n\n        switch (this.method) {\n            case 'POST':\n            case 'GET':\n                this.headers = undefined !== localStorage.getItem('token') &&\n                '' !== localStorage.getItem('token') ?\n                    {\n                        'Accept': this.type,\n                        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n                    } :\n                    {\n                        'Accept': this.type,\n                    }\n                break;\n        }\n        let body: any;\n        if ('GET' !== this.method) {\n            if (null === this.data) {\n                body = null;\n            } else {\n                body = this.type === 'json' ? JSON.stringify(this.data) : this.data;\n            }\n            this.requestInit = {\n                headers: this.headers,\n                method: this.method,\n                body: body,\n            }\n        } else {\n            this.requestInit = {\n                headers: this.headers,\n                method: this.method,\n            }\n        }\n\n        fetch(this.domain + this.route, this.requestInit)\n            .then((res: Response) => {\n                this.response = res;\n                switch (this.returnType) {\n                    case 'json':\n                        return res.json();\n                    case 'blob':\n                        console.log('blob');\n                        console.log(res);\n                        return res.blob();\n                    default:\n                        return res.json();\n                }\n            })\n            .then((jsonResponse: any) => {\n                if (this.response.ok) {\n                    this.response.jsonBody = jsonResponse;\n                    this.updateFunction(this.response.jsonBody);\n                } else {\n                    throw new Error('Bad response');\n                }\n            })\n            .catch((syntaxError: SyntaxError) => syntaxError)\n            .catch((networkError: Error) => networkError);\n    }\n}\n\nexport default Request;\n"]},"metadata":{},"sourceType":"module"}