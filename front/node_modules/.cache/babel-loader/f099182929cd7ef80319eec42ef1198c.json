{"ast":null,"code":"class Request {\n  constructor(beautifulRoute, updateFunction = result => console.log(result), method = 'GET', data = {}, type = 'json') {\n    this.route = void 0;\n    this.method = void 0;\n    this.type = void 0;\n    this.data = void 0;\n    this.domain = void 0;\n    this.beautifulRoute = void 0;\n    this.headers = void 0;\n    this.body = void 0;\n    this.requestInit = void 0;\n    this.response = void 0;\n    this.updateFunction = void 0;\n    this.beautifulRoute = beautifulRoute;\n    this.route = '/';\n    this.method = method;\n    this.domain = 'http://localhost:80';\n    this.type = type;\n    this.data = data;\n    this.initRoute();\n    this.sendRequest();\n    this.headers = {};\n    this.body = '';\n    this.requestInit = {}; // @ts-ignore\n\n    this.response = {\n      jsonBody: null\n    };\n    this.updateFunction = updateFunction;\n    this.updateFunction = this.updateFunction.bind(this);\n  }\n\n  initRoute() {\n    if (undefined !== this.beautifulRoute.split(/\\//)[1]) {\n      this.route += '?module=' + this.beautifulRoute.split(/\\//)[1];\n\n      if (undefined !== this.beautifulRoute.split(/\\//)[2]) {\n        this.route += '&action=' + this.beautifulRoute.split(/\\//)[2];\n\n        if (undefined !== this.beautifulRoute.split(/\\//)[3]) {\n          this.route += '&param=' + this.beautifulRoute.split(/\\//)[3];\n        }\n      }\n    }\n  }\n\n  sendRequest() {\n    switch (this.method) {\n      case 'POST':\n      case 'GET':\n        this.headers = undefined !== localStorage.getItem('token') && '' !== localStorage.getItem('token') ? {\n          'Accept': this.type,\n          'Authorization': 'Bearer ' + localStorage.getItem('token')\n        } : {\n          'Accept': this.type\n        };\n        break;\n    }\n\n    let body;\n\n    if (null === this.data) {\n      body = null;\n    } else {\n      this.type === 'json' ? body = JSON.stringify(this.data) : body = this.data;\n    }\n\n    this.requestInit = {\n      headers: this.headers,\n      method: this.method,\n      body: body\n    };\n    fetch(this.domain + this.route, this.requestInit).then(res => {\n      this.response = res;\n      return res.json();\n    }).then(jsonResponse => {\n      if (this.response.ok) {\n        this.response.jsonBody = jsonResponse;\n        this.updateFunction(this.response.jsonBody);\n      } else {\n        throw new Error('Bad response');\n      }\n    }).catch(syntaxError => syntaxError).catch(networkError => networkError);\n  }\n\n}\n\nexport default Request;","map":{"version":3,"sources":["/usr/src/app/client/src/API/Request.tsx"],"names":["Request","constructor","beautifulRoute","updateFunction","result","console","log","method","data","type","route","domain","headers","body","requestInit","response","initRoute","sendRequest","jsonBody","bind","undefined","split","localStorage","getItem","JSON","stringify","fetch","then","res","json","jsonResponse","ok","Error","catch","syntaxError","networkError"],"mappings":"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","sourcesContent":["interface RequestProps {\n    domain: string;\n    method: string;\n    route: string;\n    data: any;\n}\n\ninterface IHttpResponse<T> extends Response {\n    jsonBody?: T;\n}\n\nclass Request<T> {\n    private route: string;\n    private readonly method: string;\n    private readonly type: string;\n    private readonly data: string;\n    private readonly domain: string;\n    private beautifulRoute: string;\n    private headers: HeadersInit;\n    private body: BodyInit;\n    private requestInit: RequestInit;\n    private response: IHttpResponse<T>;\n    private updateFunction: any;\n\n    constructor(beautifulRoute: string, updateFunction: any = (result: any) => console.log(result), method: string = 'GET', data: any = {}, type: string = 'json') {\n        this.beautifulRoute = beautifulRoute;\n        this.route = '/';\n        this.method = method;\n        this.domain = 'http://localhost:80';\n        this.type = type;\n        this.data = data;\n        this.initRoute();\n        this.sendRequest();\n        this.headers = {};\n        this.body = '';\n        this.requestInit = {};\n        // @ts-ignore\n        this.response = {jsonBody: null};\n        this.updateFunction = updateFunction;\n        this.updateFunction = this.updateFunction.bind(this);\n    }\n\n    public initRoute(): void {\n        if (undefined !== this.beautifulRoute.split(/\\//)[1]) {\n            this.route += '?module=' + this.beautifulRoute.split(/\\//)[1];\n            if (undefined !== this.beautifulRoute.split(/\\//)[2]) {\n                this.route += '&action=' + this.beautifulRoute.split(/\\//)[2];\n                if (undefined !== this.beautifulRoute.split(/\\//)[3]) {\n                    this.route += '&param=' + this.beautifulRoute.split(/\\//)[3];\n                }\n            }\n        }\n    }\n\n    public sendRequest(): void {\n\n        switch (this.method) {\n            case 'POST':\n            case 'GET':\n                this.headers = undefined !== localStorage.getItem('token') &&\n                '' !== localStorage.getItem('token') ?\n                    {\n                        'Accept': this.type,\n                        'Authorization': 'Bearer ' + localStorage.getItem('token'),\n                    } :\n                    {\n                        'Accept': this.type,\n                    }\n                break;\n        }\n        let body: any;\n        if (null === this.data) {\n            body = null;\n        } else {\n            this.type === 'json' ? body = JSON.stringify(this.data) : body = this.data;\n        }\n\n        this.requestInit = {\n            headers: this.headers,\n            method: this.method,\n            body: body,\n        }\n\n        fetch(this.domain + this.route, this.requestInit)\n            .then((res: Response) => {\n                this.response = res;\n                return res.json();\n            })\n            .then((jsonResponse: any) => {\n                if (this.response.ok) {\n                    this.response.jsonBody = jsonResponse;\n                    this.updateFunction(this.response.jsonBody);\n                } else {\n                    throw new Error('Bad response');\n                }\n            })\n            .catch((syntaxError: SyntaxError) => syntaxError)\n            .catch((networkError: Error) => networkError);\n    }\n}\n\nexport default Request;\n"]},"metadata":{},"sourceType":"module"}