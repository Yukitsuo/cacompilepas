{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/General/SearchBar.tsx\";\nimport React from 'react';\nimport Hashtag from \"./Hashtag\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.input = void 0;\n    this.state = {\n      text: '',\n      hashtags: [],\n      hashtagsWidth: 0\n    };\n    this.input = React.createRef();\n    this.write = this.write.bind(this);\n    this.renderHashtags = this.renderHashtags.bind(this);\n    this.addHashtag = this.addHashtag.bind(this);\n    this.updateTotalWidth = this.updateTotalWidth.bind(this);\n  }\n\n  write(event) {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  async addHashtag(event) {\n    if (13 === event.keyCode) {\n      event.preventDefault();\n      const newHashtag = event.target.value;\n\n      if (!this.state.hashtags.includes(newHashtag)) {\n        this.state.hashtags.push(newHashtag);\n        this.forceUpdate(() => document.getElementById('search').value = '');\n      }\n    }\n  }\n\n  updateTotalWidth(hashtagBoxWidth) {\n    this.setState((state, props) => {\n      hashtagBoxWidth = +hashtagBoxWidth;\n      return {\n        hashtagsWidth: state.hashtagsWidth + hashtagBoxWidth\n      };\n    }, () => document.getElementById('search').value = '');\n    this.forceUpdate(() => {\n      // @ts-ignore\n      this.input.current.selectionStart = this.input.current.selectionEnd = 5;\n    });\n  }\n\n  renderHashtags() {\n    const res = this.state.hashtags.map(hashtag => React.createElement(Hashtag, {\n      key: hashtag,\n      text: hashtag,\n      updateWidth: this.updateTotalWidth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n    return res;\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"form-inline my-lg-0 my-md-0 my-sm-2 my-xs-2 col-lg-5 col-md-5 col-sm-6 col-xs-6 offset-lg-1 offset-md-1 offset-sm-0 offset-xs-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      id: \"search-icon\",\n      htmlFor: \"search\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"glyphicon glyphicon-search search-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      id: \"search-placeholder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.state.text === '' && 0 === this.state.hashtags.length ? 'Search...' : '')), this.renderHashtags(), React.createElement(\"input\", {\n      id: \"search\",\n      className: \"form-control col-lg-12 w-75 mr-sm-2\",\n      type: \"search\",\n      \"aria-label\": \"Search\",\n      onChange: event => this.write(event),\n      value: this.state.text,\n      onKeyDown: this.addHashtag,\n      ref: this.input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["/usr/src/app/client/src/View/General/SearchBar.tsx"],"names":["React","Hashtag","SearchBar","Component","constructor","props","input","state","text","hashtags","hashtagsWidth","createRef","write","bind","renderHashtags","addHashtag","updateTotalWidth","event","setState","target","value","keyCode","preventDefault","newHashtag","includes","push","forceUpdate","document","getElementById","hashtagBoxWidth","current","selectionStart","selectionEnd","res","map","hashtag","render","length"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, ReactNode, Ref} from 'react';\nimport Hashtag from \"./Hashtag\";\n\ninterface SearchBarState {\n    text: string,\n    hashtags: string[],\n    hashtagsWidth: number,\n}\n\nclass SearchBar extends React.Component<any, SearchBarState> {\n    private input: Ref<HTMLInputElement>;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            text: '',\n            hashtags: [],\n            hashtagsWidth: 0,\n        }\n        this.input = React.createRef();\n        this.write = this.write.bind(this);\n        this.renderHashtags = this.renderHashtags.bind(this);\n        this.addHashtag = this.addHashtag.bind(this);\n        this.updateTotalWidth = this.updateTotalWidth.bind(this);\n    }\n\n    public write(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({text: event.target.value});\n    }\n\n    public async addHashtag(event: React.KeyboardEvent<HTMLInputElement>): Promise<void> {\n        if (13 === event.keyCode) {\n            event.preventDefault();\n            const newHashtag = (event.target as HTMLInputElement).value;\n            if (!this.state.hashtags.includes(newHashtag)) {\n                this.state.hashtags.push(newHashtag);\n                this.forceUpdate(() => (document.getElementById('search') as HTMLInputElement).value = '');\n            }\n        }\n    }\n\n    public updateTotalWidth(hashtagBoxWidth: number): void {\n        this.setState((state, props) => {\n                hashtagBoxWidth = +hashtagBoxWidth;\n                return {hashtagsWidth: state.hashtagsWidth + hashtagBoxWidth}\n            },\n            () => (document.getElementById('search') as HTMLInputElement).value = '');\n        this.forceUpdate(() => {\n            // @ts-ignore\n            this.input.current.selectionStart = this.input.current.selectionEnd = 5;\n        });\n    }\n\n    public renderHashtags(): ReactNode {\n        const res = this.state.hashtags.map(\n            (hashtag: string) => <Hashtag key={hashtag} text={hashtag} updateWidth={this.updateTotalWidth}/>\n        );\n        return res;\n    }\n\n    public render(): ReactNode {\n        return (\n            <form\n                className=\"form-inline my-lg-0 my-md-0 my-sm-2 my-xs-2 col-lg-5 col-md-5 col-sm-6 col-xs-6 offset-lg-1 offset-md-1 offset-sm-0 offset-xs-0\">\n                <label id=\"search-icon\" htmlFor=\"search\">\n                    <span className=\"glyphicon glyphicon-search search-icon\"></span>\n                    <span\n                        id=\"search-placeholder\">{this.state.text === '' && 0 === this.state.hashtags.length ? 'Search...' : ''}</span>\n                </label>\n                {this.renderHashtags()}\n                <input id=\"search\" className=\"form-control col-lg-12 w-75 mr-sm-2\" type=\"search\"\n                       aria-label=\"Search\"\n                       onChange={event => this.write(event)}\n                       value={this.state.text}\n                       onKeyDown={this.addHashtag}\n                       ref={this.input}\n                />\n            </form>\n        );\n    }\n}\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}