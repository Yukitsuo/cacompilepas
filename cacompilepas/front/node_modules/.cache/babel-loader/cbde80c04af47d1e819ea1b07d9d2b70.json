{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/Pages/Inscription.tsx\";\nimport React from 'react';\nimport Request from '../../API/Request';\nimport './Inscription.css';\n\nclass Inscription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.email = void 0;\n    this.password = void 0;\n    this.passwordConfirmation = void 0;\n    this.prenom = void 0;\n    this.nom = void 0;\n    this.pseudo = void 0;\n    this.passwordValid = void 0;\n    this.prenom = '';\n    this.nom = '';\n    this.pseudo = '';\n    this.email = '';\n    this.password = '';\n    this.passwordConfirmation = '';\n    this.passwordValid = false;\n    this.state = {};\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handlePrenomChange = this.handlePrenomChange.bind(this);\n    this.handleNomChange = this.handleNomChange.bind(this);\n    this.handlePseudoChange = this.handlePseudoChange.bind(this);\n    this.handlePasswordConfirmationChange = this.handlePasswordConfirmationChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.updateConnectStatus = this.updateConnectStatus.bind(this);\n    this.setState = this.setState.bind(this);\n  }\n\n  handleEmailChange(event) {\n    // @ts-ignore\n    this.email = event.target.value;\n  }\n\n  handlePasswordChange(event) {\n    this.password = event.target.value;\n  }\n\n  handlePasswordConfirmationChange(event) {\n    this.passwordConfirmation = event.target.value;\n    this.passwordVerification();\n  }\n\n  handlePrenomChange(event) {\n    this.prenom = event.target.value;\n  }\n\n  handleNomChange(event) {\n    this.nom = event.target.value;\n  }\n\n  handlePseudoChange(event) {\n    this.pseudo = event.target.value;\n  }\n\n  passwordVerification() {\n    if (this.password.length > 8) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  checkForm() {\n    console.log(this.passwordVerification());\n\n    if (this.passwordVerification() && this.prenom !== '' && this.nom !== '' && this.pseudo !== '' && this.email !== '') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  updateConnectStatus(data) {\n    this.setState({\n      status: '' + data['connected']\n    });\n    localStorage.setItem('token', data['token']);\n  }\n\n  redirectToConnectionPage() {\n    // @ts-ignore\n    window.location = '/connexion';\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n\n    if (this.checkForm()) {\n      new Request('/connection/register', this.updateConnectStatus, 'POST', {\n        prenom: this.prenom,\n        nom: this.nom,\n        pseudo: this.pseudo,\n        email: this.email,\n        password: this.password\n      });\n    } else {\n      alert(\"erreur\");\n    }\n\n    this.setState({\n      formWasSubmitted: true\n    });\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: \"content row inscription-bloc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row buttons-top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(InscriptionInput, {\n      id: \"inputPrenom\",\n      inputType: \"text\",\n      placeholder: \"PrÃ©nom\",\n      className: \"\",\n      onChange: this.handlePrenomChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"inputNom\",\n      inputType: \"text\",\n      placeholder: \"Nom\",\n      className: \"\",\n      onChange: this.handleNomChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"Pseudo\",\n      inputType: \"text\",\n      placeholder: \"Pseudo\",\n      className: \"\",\n      onChange: this.handlePseudoChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"buttons-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(InscriptionInput, {\n      id: \"inputMail\",\n      inputType: \"email\",\n      placeholder: \"Adresse email\",\n      className: \"\",\n      onChange: this.handleEmailChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"inputPassword\",\n      inputType: \"password\",\n      placeholder: \"Mot de passe\",\n      className: \"custom\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"inputPasswordConfirmation\",\n      inputType: \"password\",\n      placeholder: \"Confirmation mot de passe\",\n      className: \"custom\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"submit-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(ButtonInscription, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), \"D\\xE9ja Inscrit ? \", React.createElement(\"a\", {\n      id: \"redirect-button\",\n      onClick: this.redirectToConnectionPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Connecte toi ! \"))));\n  }\n\n}\n\nclass InscriptionInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.className = void 0;\n    this.className = \"form-control text-center mt-0 rounded \" + this.props.className;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: this.props.inputType,\n      className: this.className,\n      id: this.props.id,\n      placeholder: this.props.placeholder,\n      onFocus: e => e.target.placeholder = \"\",\n      onBlur: e => e.target.placeholder = this.props.placeholder,\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass ButtonInscription extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-default btn-transparent mt-0 rounded-1 custom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Connexion\");\n  }\n\n}\n\nexport default Inscription;","map":{"version":3,"sources":["/usr/src/app/client/src/View/Pages/Inscription.tsx"],"names":["React","Request","Inscription","Component","constructor","props","email","password","passwordConfirmation","prenom","nom","pseudo","passwordValid","state","handleEmailChange","bind","handlePasswordChange","handlePrenomChange","handleNomChange","handlePseudoChange","handlePasswordConfirmationChange","submitForm","updateConnectStatus","setState","event","target","value","passwordVerification","length","checkForm","console","log","data","status","localStorage","setItem","redirectToConnectionPage","window","location","preventDefault","alert","formWasSubmitted","render","InscriptionInput","className","inputType","id","placeholder","e","onChange","ButtonInscription"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, FormEvent, ReactNode} from 'react';\nimport Request from '../../API/Request';\nimport './Inscription.css';\nimport DropBox from '../General/DropBox';\n\nclass Inscription extends React.Component{\n    private email: string;\n    private password: string;\n    private passwordConfirmation: string;\n    private prenom: string;\n    private nom: string;\n    private pseudo: string;\n    private passwordValid: boolean;\n\n    constructor(props: any) {\n        super(props);\n        this.prenom = '';\n        this.nom = '';\n        this.pseudo = '';\n        this.email = '';\n        this.password = '';\n        this.passwordConfirmation = '';\n        this.passwordValid = false;\n\n        this.state = {\n        }\n\n\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.handlePrenomChange = this.handlePrenomChange.bind(this);\n        this.handleNomChange = this.handleNomChange.bind(this);\n        this.handlePseudoChange = this.handlePseudoChange.bind(this);\n        this.handlePasswordConfirmationChange = this.handlePasswordConfirmationChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.updateConnectStatus = this.updateConnectStatus.bind(this);\n        this.setState = this.setState.bind(this);\n    }\n\n    public handleEmailChange(event: ChangeEvent<HTMLInputElement>): void {\n        // @ts-ignore\n        this.email = event.target.value;\n    }\n\n    public handlePasswordChange(event: ChangeEvent<HTMLInputElement>): void {\n        this.password = event.target.value;\n    }\n\n    public handlePasswordConfirmationChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.passwordConfirmation = event.target.value;\n        this.passwordVerification();\n    }\n\n    public handlePrenomChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.prenom = event.target.value;\n    }\n\n    public handleNomChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.nom = event.target.value;\n    }\n\n    public handlePseudoChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.pseudo = event.target.value;\n    }\n\n    public passwordVerification () : boolean {\n\n        if (this.password.length > 8){\n            return true;\n        }\n        else{\n            return false;\n        }\n\n    }\n\n    public checkForm () : boolean {\n        console.log(this.passwordVerification());\n        if (this.passwordVerification() && this.prenom !== '' && this.nom !== '' && this.pseudo !=='' && this.email !== ''){\n            return true;\n        }\n        else{\n            return false;\n        }\n\n    }\n\n    public updateConnectStatus(data: any): void {\n        this.setState({status: '' + data['connected']});\n        localStorage.setItem('token', data['token']);\n    }\n\n    public redirectToConnectionPage(): void {\n        // @ts-ignore\n        window.location='/connexion';\n    }\n\n    public submitForm(event: FormEvent<HTMLFormElement>): void {\n        event.preventDefault();\n\n        if (this.checkForm()){\n            new Request(\n                '/connection/register',\n                this.updateConnectStatus,\n                'POST',\n                {\n                    prenom : this.prenom,\n                    nom : this.nom,\n                    pseudo : this.pseudo,\n                    email: this.email,\n                    password: this.password\n                },\n            );\n        }\n        else{\n            alert(\"erreur\")\n        }\n\n        this.setState({formWasSubmitted: true});\n    }\n\n    render(): ReactNode {\n        return (\n            <section className=\"content row inscription-bloc\">\n                <div className=\"container\">\n                    <div>\n                        <form onSubmit={this.submitForm}>\n                            <div className={\"row buttons-top\"}>\n                                <InscriptionInput id={\"inputPrenom\"} inputType={\"text\"} placeholder={\"PrÃ©nom\"} className={\"\"} onChange={this.handlePrenomChange}/>\n                                <InscriptionInput id={\"inputNom\"} inputType={\"text\"} placeholder={\"Nom\"} className={\"\"} onChange={this.handleNomChange}/>\n                                <InscriptionInput id={\"Pseudo\"} inputType={\"text\"} placeholder={\"Pseudo\"} className={\"\"} onChange={this.handlePseudoChange}/>\n                            </div>\n\n                            <div className={\"buttons-bottom\"}>\n                                <InscriptionInput id={\"inputMail\"} inputType={\"email\"} placeholder={\"Adresse email\"}\n                                                  className={\"\"} onChange={this.handleEmailChange}/>\n                                <InscriptionInput id={\"inputPassword\"} inputType={\"password\"}\n                                                  placeholder={\"Mot de passe\"}\n                                                  className={\"custom\"} onChange={this.handlePasswordChange}/>\n                                <InscriptionInput id={\"inputPasswordConfirmation\"} inputType={\"password\"}\n                                                  placeholder={\"Confirmation mot de passe\"}\n                                                  className={\"custom\"} onChange={this.handlePasswordChange}/>\n                                <div className={\"submit-button\"}>\n                                    <ButtonInscription/>\n                                </div>\n                            </div>\n                        </form>\n                        <br/>\n                        DÃ©ja Inscrit ? <a id={\"redirect-button\"} onClick={this.redirectToConnectionPage}>Connecte toi ! </a>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\ninterface InscriptionInputProps {\n    id: string;\n    inputType: string;\n    placeholder: string;\n    className: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nclass InscriptionInput extends React.Component<InscriptionInputProps, {}> {\n\n    private readonly className: string;\n\n    constructor(props: InscriptionInputProps) {\n        super(props);\n        this.className = \"form-control text-center mt-0 rounded \" + this.props.className;\n    }\n\n    public render(): ReactNode {\n        return <div className=\"form-group\">\n            <input type={this.props.inputType}\n                   className={this.className}\n                   id={this.props.id}\n                   placeholder={this.props.placeholder}\n                   onFocus={e => e.target.placeholder = \"\"}\n                   onBlur={e => e.target.placeholder = this.props.placeholder}\n                   onChange={this.props.onChange}\n            />\n        </div>\n\n    }\n}\n\nclass ButtonInscription extends React.Component<{}, {}> {\n    public render() {\n        return (\n            <button type=\"submit\" className=\"btn btn-default btn-transparent mt-0 rounded-1 custom\">Connexion</button>\n        )\n    }\n}\n\nexport default Inscription;\n"]},"metadata":{},"sourceType":"module"}