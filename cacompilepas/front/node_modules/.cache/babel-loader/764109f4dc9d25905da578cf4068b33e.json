{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/Pages/Inscription.tsx\";\nimport React from 'react';\nimport Request from '../../API/Request';\nimport '../../css/Inscription.css';\n\nclass Inscription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      pseudo: '',\n      validPassword: false\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handlePrenomChange = this.handlePrenomChange.bind(this);\n    this.handleNomChange = this.handleNomChange.bind(this);\n    this.handlePseudoChange = this.handlePseudoChange.bind(this);\n    this.handlePasswordConfirmationChange = this.handlePasswordConfirmationChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.updateConnectStatus = this.updateConnectStatus.bind(this);\n    this.setState = this.setState.bind(this);\n  }\n\n  handleEmailChange(event) {\n    // @ts-ignore\n    this.setState({\n      email: event.target.value\n    });\n  }\n\n  handlePasswordChange(event) {\n    this.setState({\n      password: event.target.value\n    });\n  }\n\n  handlePasswordConfirmationChange(event) {\n    this.setState({\n      passwordConfirmation: event.target.value\n    }, this.passwordVerification);\n  }\n\n  handlePrenomChange(event) {\n    this.setState({\n      firstName: event.target.value\n    });\n  }\n\n  handleNomChange(event) {\n    this.setState({\n      lastName: event.target.value\n    });\n  }\n\n  handlePseudoChange(event) {\n    this.setState({\n      pseudo: event.target.value\n    });\n  }\n\n  passwordVerification() {\n    let equal;\n\n    if (this.state.passwordConfirmation.length > 8 && this.state.password === this.state.passwordConfirmation) {\n      equal = true;\n    } else {\n      equal = false;\n    }\n\n    return equal;\n  }\n\n  checkForm() {\n    console.log(this.passwordVerification());\n\n    if (this.passwordVerification() && this.state.firstName !== '' && this.state.lastName !== '' && this.pseudo !== '' && this.email !== '') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  updateConnectStatus(data) {\n    this.setState({\n      status: '' + data['connected']\n    });\n    this.setState({\n      formWasSubmitted: true\n    });\n    localStorage.setItem('token', data['token']);\n  }\n\n  redirectToConnectionPage() {\n    // @ts-ignore\n    window.location = '/connexion';\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n\n    if (this.checkForm()) {\n      new Request('/connection/register', this.updateConnectStatus, 'POST', {\n        prenom: this.state.firstName,\n        nom: this.state.lastName,\n        pseudo: this.state.pseudo,\n        email: this.state.email,\n        password: this.state.password,\n        confirm_password: this.state.passwordConfirmation\n      });\n    } else {\n      alert(\"erreur\");\n    }\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: \"content row inscription-bloc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row buttons-top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(InscriptionInput, {\n      id: \"inputPrenom\",\n      inputType: \"text\",\n      placeholder: \"PrÃ©nom\",\n      className: \"\",\n      onChange: this.handlePrenomChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"inputNom\",\n      inputType: \"text\",\n      placeholder: \"Nom\",\n      className: \"\",\n      onChange: this.handleNomChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"Pseudo\",\n      inputType: \"text\",\n      placeholder: \"Pseudo\",\n      className: \"\",\n      onChange: this.handlePseudoChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"buttons-bottom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(InscriptionInput, {\n      id: \"inputMail\",\n      inputType: \"email\",\n      placeholder: \"Adresse email\",\n      className: \"\",\n      onChange: this.handleEmailChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"inputPassword\",\n      inputType: \"password\",\n      placeholder: \"Mot de passe\",\n      className: \"custom\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), React.createElement(InscriptionInput, {\n      id: \"inputPasswordConfirmation\",\n      inputType: \"password\",\n      placeholder: \"Confirmation mot de passe\",\n      className: \"custom\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"submit-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(ButtonInscription, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), \"D\\xE9ja Inscrit ? \", React.createElement(\"a\", {\n      id: \"redirect-button\",\n      onClick: this.redirectToConnectionPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Connecte toi ! \"))));\n  }\n\n}\n\nclass InscriptionInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.className = void 0;\n    this.className = \"form-control text-center mt-0 rounded-1 \" + this.props.className;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: this.props.inputType,\n      className: this.className,\n      id: this.props.id,\n      placeholder: this.props.placeholder,\n      onFocus: e => e.target.placeholder = \"\",\n      onBlur: e => e.target.placeholder = this.props.placeholder,\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass ButtonInscription extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-default btn-transparent mt-0 rounded-1 custom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Connexion\");\n  }\n\n}\n\nexport default Inscription;","map":{"version":3,"sources":["/usr/src/app/client/src/View/Pages/Inscription.tsx"],"names":["React","Request","Inscription","Component","constructor","props","state","email","password","passwordConfirmation","firstName","lastName","pseudo","validPassword","handleEmailChange","bind","handlePasswordChange","handlePrenomChange","handleNomChange","handlePseudoChange","handlePasswordConfirmationChange","submitForm","updateConnectStatus","setState","event","target","value","passwordVerification","equal","length","checkForm","console","log","data","status","formWasSubmitted","localStorage","setItem","redirectToConnectionPage","window","location","preventDefault","prenom","nom","confirm_password","alert","render","InscriptionInput","className","inputType","id","placeholder","e","onChange","ButtonInscription"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, FormEvent, ReactNode} from 'react';\nimport Request from '../../API/Request';\nimport '../../css/Inscription.css';\nimport DropBox from '../General/DropBox';\n\ninterface InscriptionState {\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    firstName: string,\n    lastName: string,\n    pseudo: string,\n    validPassword: boolean,\n    formWasSubmitted: boolean,\n}\n\nclass Inscription extends React.Component<any,InscriptionState>{\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            email: '',\n            password: '',\n            passwordConfirmation: '',\n            firstName: '',\n            lastName: '',\n            pseudo: '',\n            validPassword: false,\n        }\n\n\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.handlePrenomChange = this.handlePrenomChange.bind(this);\n        this.handleNomChange = this.handleNomChange.bind(this);\n        this.handlePseudoChange = this.handlePseudoChange.bind(this);\n        this.handlePasswordConfirmationChange = this.handlePasswordConfirmationChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.updateConnectStatus = this.updateConnectStatus.bind(this);\n        this.setState = this.setState.bind(this);\n    }\n\n    public handleEmailChange(event: ChangeEvent<HTMLInputElement>): void {\n        // @ts-ignore\n        this.setState({email: event.target.value});\n    }\n\n    public handlePasswordChange(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({password: event.target.value});\n    }\n\n    public handlePasswordConfirmationChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.setState(\n            {passwordConfirmation: event.target.value},\n            this.passwordVerification\n            );\n    }\n\n    public handlePrenomChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.setState({firstName: event.target.value});\n    }\n\n    public handleNomChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.setState({lastName: event.target.value});\n    }\n\n    public handlePseudoChange (event: ChangeEvent<HTMLInputElement>) : void {\n        this.setState({pseudo: event.target.value});\n    }\n\n    public passwordVerification () : boolean {\n        let equal: boolean;\n        if (this.state.passwordConfirmation.length > 8 && this.state.password === this.state.passwordConfirmation){\n            equal = true;\n        }\n        else{\n            equal = false;\n        }\n\n        return equal;\n    }\n\n    public checkForm () : boolean {\n        console.log(this.passwordVerification());\n        if (this.passwordVerification() && this.state.firstName !== '' && this.state.lastName !== '' && this.pseudo !=='' && this.email !== ''){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    public updateConnectStatus(data: any): void {\n        this.setState({status: '' + data['connected']});\n        this.setState({formWasSubmitted: true});\n        localStorage.setItem('token', data['token']);\n    }\n\n    public redirectToConnectionPage(): void {\n        // @ts-ignore\n        window.location='/connexion';\n    }\n\n    public submitForm(event: FormEvent<HTMLFormElement>): void {\n        event.preventDefault();\n\n        if (this.checkForm()){\n            new Request(\n                '/connection/register',\n                this.updateConnectStatus,\n                'POST',\n                {\n                    prenom : this.state.firstName,\n                    nom : this.state.lastName,\n                    pseudo : this.state.pseudo,\n                    email: this.state.email,\n                    password: this.state.password,\n                    confirm_password: this.state.passwordConfirmation,\n                },\n            );\n        }\n        else{\n            alert(\"erreur\");\n        }\n    }\n\n    render(): ReactNode {\n        return (\n            <section className=\"content row inscription-bloc\">\n                <div className=\"container\">\n                    <div>\n                        <form onSubmit={this.submitForm}>\n                            <div className={\"row buttons-top\"}>\n                                <InscriptionInput id={\"inputPrenom\"} inputType={\"text\"} placeholder={\"PrÃ©nom\"} className={\"\"} onChange={this.handlePrenomChange}/>\n                                <InscriptionInput id={\"inputNom\"} inputType={\"text\"} placeholder={\"Nom\"} className={\"\"} onChange={this.handleNomChange}/>\n                                <InscriptionInput id={\"Pseudo\"} inputType={\"text\"} placeholder={\"Pseudo\"} className={\"\"} onChange={this.handlePseudoChange}/>\n                            </div>\n\n                            <div className={\"buttons-bottom\"}>\n                                <InscriptionInput id={\"inputMail\"} inputType={\"email\"} placeholder={\"Adresse email\"}\n                                                  className={\"\"} onChange={this.handleEmailChange}/>\n                                <InscriptionInput id={\"inputPassword\"} inputType={\"password\"}\n                                                  placeholder={\"Mot de passe\"}\n                                                  className={\"custom\"} onChange={this.handlePasswordChange}/>\n                                <InscriptionInput id={\"inputPasswordConfirmation\"} inputType={\"password\"}\n                                                  placeholder={\"Confirmation mot de passe\"}\n                                                  className={\"custom\"} onChange={this.handlePasswordChange}/>\n                                <div className={\"submit-button\"}>\n                                    <ButtonInscription/>\n                                </div>\n                            </div>\n                        </form>\n                        <br/>\n                        DÃ©ja Inscrit ? <a id={\"redirect-button\"} onClick={this.redirectToConnectionPage}>Connecte toi ! </a>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\ninterface InscriptionInputProps {\n    id: string;\n    inputType: string;\n    placeholder: string;\n    className: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nclass InscriptionInput extends React.Component<InscriptionInputProps, {}> {\n\n    private readonly className: string;\n\n    constructor(props: InscriptionInputProps) {\n        super(props);\n        this.className = \"form-control text-center mt-0 rounded-1 \" + this.props.className;\n    }\n\n    public render(): ReactNode {\n        return <div className=\"form-group\">\n            <input type={this.props.inputType}\n                   className={this.className}\n                   id={this.props.id}\n                   placeholder={this.props.placeholder}\n                   onFocus={e => e.target.placeholder = \"\"}\n                   onBlur={e => e.target.placeholder = this.props.placeholder}\n                   onChange={this.props.onChange}\n            />\n        </div>\n\n    }\n}\n\nclass ButtonInscription extends React.Component<{}, {}> {\n    public render() {\n        return (\n            <button type=\"submit\" className=\"btn btn-default btn-transparent mt-0 rounded-1 custom\">Connexion</button>\n        )\n    }\n}\n\nexport default Inscription;\n"]},"metadata":{},"sourceType":"module"}