{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/Pages/Inscription.tsx\";\nimport React from 'react';\nimport swal from 'sweetalert';\nimport passwordValidator from 'password-validator';\nimport Request from '../../API/Request';\nimport DropBox from '../General/DropBox';\nimport Input from \"../General/Input\";\nimport SubmitButton from \"../General/SubmitButton\";\nimport Header from \"../General/Header\";\n\nclass Inscription extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      passwordConfirmation: '',\n      firstName: '',\n      lastName: '',\n      pseudo: '',\n      validPassword: false,\n      formWasSubmitted: false,\n      icon: null\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleFirstNameChange = this.handleFirstNameChange.bind(this);\n    this.handleLastNameChange = this.handleLastNameChange.bind(this);\n    this.handlePseudoChange = this.handlePseudoChange.bind(this);\n    this.handlePasswordConfirmationChange = this.handlePasswordConfirmationChange.bind(this);\n    this.handleIconChange = this.handleIconChange.bind(this);\n    this.handleIconDrop = this.handleIconDrop.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.redirectToConnection = this.redirectToConnection.bind(this);\n    this.setState = this.setState.bind(this);\n  }\n\n  handleEmailChange(event) {\n    // @ts-ignore\n    this.setState({\n      email: event.target.value\n    });\n  }\n\n  handlePasswordChange(event) {\n    this.setState({\n      password: event.target.value\n    }, this.checkForm);\n  }\n\n  handlePasswordConfirmationChange(event) {\n    this.setState({\n      passwordConfirmation: event.target.value\n    }, this.checkForm);\n  }\n\n  handleFirstNameChange(event) {\n    this.setState({\n      firstName: event.target.value\n    });\n  }\n\n  handleLastNameChange(event) {\n    this.setState({\n      lastName: event.target.value\n    });\n  }\n\n  handlePseudoChange(event) {\n    this.setState({\n      pseudo: event.target.value\n    });\n  }\n\n  passwordVerification() {\n    const schema = new passwordValidator();\n    schema.is().min(8).is().max(100).has().uppercase().has().lowercase().has().digits().has().symbols().has().not().spaces();\n    return schema.validate(this.state.passwordConfirmation) && this.state.password === this.state.passwordConfirmation;\n  }\n\n  checkForm() {\n    return this.passwordVerification() && this.state.firstName !== '' && this.state.lastName !== '' && this.state.pseudo !== '' && this.state.email !== '';\n  }\n\n  redirectToConnection(data) {\n    if ('success' === data['status']) {\n      swal({\n        title: 'Bravo !',\n        text: 'Tu es des nôtres à présent, connecte-toi vite pour' + 'découvrir toutes les possibilités du site !!!',\n        icon: 'success'\n      }); // @ts-ignore\n\n      window.location = '/connexion/login';\n    } else {\n      this.setState({\n        formWasSubmitted: true\n      });\n    }\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n\n    if (this.checkForm()) {\n      let formData = new FormData();\n      formData.append('first_name', this.state.firstName);\n      formData.append('last_name', this.state.lastName);\n      formData.append('pseudo', '' + this.state.pseudo);\n      formData.append('email', '' + this.state.email);\n      formData.append('password', '' + this.state.password);\n      formData.append('confirm_password', '' + this.state.passwordConfirmation); // @ts-ignore\n\n      formData.append('file', this.state.icon);\n      new Request('/connection/register', this.redirectToConnection, 'POST', formData, // @ts-ignore\n      this.state.icon.type);\n    } else {\n      this.setState({\n        formWasSubmitted: true\n      });\n      swal({\n        title: 'Formulaire incorrect',\n        text: 'Vérifie que ton mot de passe :\\n' + '   - Fait au moins 8 caractères\\n' + '   - Comporte des majuscules et des minuscules\\n' + '   - Contient chiffres et des caractères spéciaux\\n' + '   - Ne contient pas d\\'espaces\\n',\n        icon: 'error'\n      }).then(r => null);\n    }\n  }\n\n  handleIconChange(event) {\n    event.preventDefault(); // @ts-ignore\n\n    this.setState({\n      icon: event.target.files[0]\n    });\n  }\n\n  handleIconDrop(event) {\n    event.preventDefault();\n    this.setState({\n      icon: event.dataTransfer.files[0]\n    });\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: 'content row inscription-bloc',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'container',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Header, {\n      h1: 'Inscris-toi ici',\n      p: 'Comme ça tu pourras accéder à notre super site de fiches de cours !',\n      containerClassName: 'ml-0 ml-lg-2 ml-md-2 ml-sm-2 mb-5',\n      contentClassName: 'pl-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'row mt-5',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: 'input-prenom',\n      inputType: 'text',\n      placeholder: 'Prénom',\n      formGroupClassName: 'col-4',\n      className: 'connection-input',\n      onChange: this.handleFirstNameChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), React.createElement(Input, {\n      id: 'input-nom',\n      inputType: 'text',\n      placeholder: 'Nom',\n      formGroupClassName: 'col-4',\n      className: 'connection-input',\n      onChange: this.handleLastNameChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Input, {\n      id: 'pseudo',\n      inputType: 'text',\n      placeholder: 'Pseudo',\n      formGroupClassName: 'col-4',\n      className: 'connection-input',\n      onChange: this.handlePseudoChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(DropBox, {\n      id: 'input-icon',\n      className: 'col-12',\n      labelNotDragged: 'Glisse ta photo profil ici !',\n      labelDragged: 'Photo déposée',\n      accept: 'image/*',\n      backgroundClassName: '',\n      handleFileDrop: this.handleIconDrop,\n      handleFileChange: this.handleIconChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(Input, {\n      id: 'input-mail',\n      inputType: 'email',\n      placeholder: 'Adresse email',\n      formGroupClassName: 'col-12 mt-5',\n      className: 'connection-input',\n      onChange: this.handleEmailChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(Input, {\n      id: 'input-password',\n      inputType: 'password',\n      placeholder: 'Mot de passe',\n      formGroupClassName: 'col-12 mt-5',\n      className: 'connection-input',\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(Input, {\n      id: 'input-password-confirmation',\n      inputType: 'password',\n      placeholder: 'Confirmation mot de passe',\n      formGroupClassName: 'col-12 mt-5',\n      className: 'connection-input',\n      onChange: this.handlePasswordConfirmationChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'col-12 mt-5',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(SubmitButton, {\n      text: 'Inscris-toi !',\n      onClick: this.submitForm,\n      className: '',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), \"D\\xE9ja Inscrit ? \", React.createElement(\"a\", {\n      id: 'redirect-button',\n      className: 'h5',\n      href: '/connexion/login',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Connecte toi ! \")))));\n  }\n\n}\n\nexport default Inscription;","map":{"version":3,"sources":["/usr/src/app/client/src/View/Pages/Inscription.tsx"],"names":["React","swal","passwordValidator","Request","DropBox","Input","SubmitButton","Header","Inscription","Component","constructor","props","state","email","password","passwordConfirmation","firstName","lastName","pseudo","validPassword","formWasSubmitted","icon","handleEmailChange","bind","handlePasswordChange","handleFirstNameChange","handleLastNameChange","handlePseudoChange","handlePasswordConfirmationChange","handleIconChange","handleIconDrop","submitForm","redirectToConnection","setState","event","target","value","checkForm","passwordVerification","schema","is","min","max","has","uppercase","lowercase","digits","symbols","not","spaces","validate","data","title","text","window","location","preventDefault","formData","FormData","append","type","then","r","files","dataTransfer","render"],"mappings":";AAAA,OAAOA,KAAP,MAAuD,OAAvD;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,iBAAP,MAA8B,oBAA9B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAcA,MAAMC,WAAN,SAA0BR,KAAK,CAACS,SAAhC,CAAiE;AAE7DC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTC,MAAAA,oBAAoB,EAAE,EAHb;AAITC,MAAAA,SAAS,EAAE,EAJF;AAKTC,MAAAA,QAAQ,EAAE,EALD;AAMTC,MAAAA,MAAM,EAAE,EANC;AAOTC,MAAAA,aAAa,EAAE,KAPN;AAQTC,MAAAA,gBAAgB,EAAE,KART;AASTC,MAAAA,IAAI,EAAE;AATG,KAAb;AAYA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BF,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKG,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BH,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKI,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBJ,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKK,gCAAL,GAAwC,KAAKA,gCAAL,CAAsCL,IAAtC,CAA2C,IAA3C,CAAxC;AACA,SAAKM,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBN,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKO,cAAL,GAAsB,KAAKA,cAAL,CAAoBP,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKQ,UAAL,GAAkB,KAAKA,UAAL,CAAgBR,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKS,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BT,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKU,QAAL,GAAgB,KAAKA,QAAL,CAAcV,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEMD,EAAAA,iBAAP,CAAyBY,KAAzB,EAAqE;AACjE;AACA,SAAKD,QAAL,CAAc;AAACpB,MAAAA,KAAK,EAAEqB,KAAK,CAACC,MAAN,CAAaC;AAArB,KAAd;AACH;;AAEMZ,EAAAA,oBAAP,CAA4BU,KAA5B,EAAwE;AACpE,SAAKD,QAAL,CAAc;AAACnB,MAAAA,QAAQ,EAAEoB,KAAK,CAACC,MAAN,CAAaC;AAAxB,KAAd,EAA8C,KAAKC,SAAnD;AACH;;AAEMT,EAAAA,gCAAP,CAAwCM,KAAxC,EAAoF;AAChF,SAAKD,QAAL,CAAc;AAAClB,MAAAA,oBAAoB,EAAEmB,KAAK,CAACC,MAAN,CAAaC;AAApC,KAAd,EAA0D,KAAKC,SAA/D;AACH;;AAEMZ,EAAAA,qBAAP,CAA6BS,KAA7B,EAAyE;AACrE,SAAKD,QAAL,CAAc;AAACjB,MAAAA,SAAS,EAAEkB,KAAK,CAACC,MAAN,CAAaC;AAAzB,KAAd;AACH;;AAEMV,EAAAA,oBAAP,CAA4BQ,KAA5B,EAAwE;AACpE,SAAKD,QAAL,CAAc;AAAChB,MAAAA,QAAQ,EAAEiB,KAAK,CAACC,MAAN,CAAaC;AAAxB,KAAd;AACH;;AAEMT,EAAAA,kBAAP,CAA0BO,KAA1B,EAAsE;AAClE,SAAKD,QAAL,CAAc;AAACf,MAAAA,MAAM,EAAEgB,KAAK,CAACC,MAAN,CAAaC;AAAtB,KAAd;AACH;;AAEME,EAAAA,oBAAP,GAAuC;AACnC,UAAMC,MAAM,GAAG,IAAIrC,iBAAJ,EAAf;AACAqC,IAAAA,MAAM,CACDC,EADL,GACUC,GADV,CACc,CADd,EAEKD,EAFL,GAEUE,GAFV,CAEc,GAFd,EAGKC,GAHL,GAGWC,SAHX,GAIKD,GAJL,GAIWE,SAJX,GAKKF,GALL,GAKWG,MALX,GAMKH,GANL,GAMWI,OANX,GAOKJ,GAPL,GAOWK,GAPX,GAOiBC,MAPjB;AAQA,WAAOV,MAAM,CAACW,QAAP,CAAgB,KAAKtC,KAAL,CAAWG,oBAA3B,KAAoD,KAAKH,KAAL,CAAWE,QAAX,KAAwB,KAAKF,KAAL,CAAWG,oBAA9F;AACH;;AAEMsB,EAAAA,SAAP,GAA4B;AACxB,WAAO,KAAKC,oBAAL,MAA+B,KAAK1B,KAAL,CAAWI,SAAX,KAAyB,EAAxD,IAA8D,KAAKJ,KAAL,CAAWK,QAAX,KAAwB,EAAtF,IAA4F,KAAKL,KAAL,CAAWM,MAAX,KAAsB,EAAlH,IAAwH,KAAKN,KAAL,CAAWC,KAAX,KAAqB,EAApJ;AACH;;AAEMmB,EAAAA,oBAAP,CAA4BmB,IAA5B,EAA6C;AACzC,QAAI,cAAcA,IAAI,CAAC,QAAD,CAAtB,EAAkC;AAC9BlD,MAAAA,IAAI,CAAC;AACDmD,QAAAA,KAAK,EAAE,SADN;AAEDC,QAAAA,IAAI,EAAE,uDACF,+CAHH;AAIDhC,QAAAA,IAAI,EAAE;AAJL,OAAD,CAAJ,CAD8B,CAO9B;;AACAiC,MAAAA,MAAM,CAACC,QAAP,GAAkB,kBAAlB;AACH,KATD,MASO;AACH,WAAKtB,QAAL,CAAc;AAACb,QAAAA,gBAAgB,EAAE;AAAnB,OAAd;AACH;AACJ;;AAEMW,EAAAA,UAAP,CAAkBG,KAAlB,EAA6G;AACzGA,IAAAA,KAAK,CAACsB,cAAN;;AAEA,QAAI,KAAKnB,SAAL,EAAJ,EAAsB;AAClB,UAAIoB,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,YAAhB,EAA8B,KAAK/C,KAAL,CAAWI,SAAzC;AACAyC,MAAAA,QAAQ,CAACE,MAAT,CAAgB,WAAhB,EAA6B,KAAK/C,KAAL,CAAWK,QAAxC;AACAwC,MAAAA,QAAQ,CAACE,MAAT,CAAgB,QAAhB,EAA0B,KAAK,KAAK/C,KAAL,CAAWM,MAA1C;AACAuC,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyB,KAAK,KAAK/C,KAAL,CAAWC,KAAzC;AACA4C,MAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,KAAK,KAAK/C,KAAL,CAAWE,QAA5C;AACA2C,MAAAA,QAAQ,CAACE,MAAT,CAAgB,kBAAhB,EAAoC,KAAK,KAAK/C,KAAL,CAAWG,oBAApD,EAPkB,CAQlB;;AACA0C,MAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,KAAK/C,KAAL,CAAWS,IAAnC;AACA,UAAIlB,OAAJ,CACI,sBADJ,EAEI,KAAK6B,oBAFT,EAGI,MAHJ,EAIIyB,QAJJ,EAKI;AACA,WAAK7C,KAAL,CAAWS,IAAX,CAAgBuC,IANpB;AAQH,KAlBD,MAkBO;AACH,WAAK3B,QAAL,CAAc;AAACb,QAAAA,gBAAgB,EAAE;AAAnB,OAAd;AACAnB,MAAAA,IAAI,CAAC;AACDmD,QAAAA,KAAK,EAAE,sBADN;AAEDC,QAAAA,IAAI,EAAE,qCACF,mCADE,GAEF,kDAFE,GAGF,qDAHE,GAIF,mCANH;AAODhC,QAAAA,IAAI,EAAE;AAPL,OAAD,CAAJ,CAQGwC,IARH,CAQSC,CAAD,IAAY,IARpB;AASH;AACJ;;AAEMjC,EAAAA,gBAAP,CAAwBK,KAAxB,EAAsG;AAClGA,IAAAA,KAAK,CAACsB,cAAN,GADkG,CAElG;;AACA,SAAKvB,QAAL,CAAc;AAACZ,MAAAA,IAAI,EAAEa,KAAK,CAACC,MAAN,CAAa4B,KAAb,CAAmB,CAAnB;AAAP,KAAd;AACH;;AAEMjC,EAAAA,cAAP,CAAsBI,KAAtB,EAAoE;AAChEA,IAAAA,KAAK,CAACsB,cAAN;AACA,SAAKvB,QAAL,CAAc;AAACZ,MAAAA,IAAI,EAAEa,KAAK,CAAC8B,YAAN,CAAmBD,KAAnB,CAAyB,CAAzB;AAAP,KAAd;AACH;;AAEDE,EAAAA,MAAM,GAAc;AAChB,WACI;AAAS,MAAA,SAAS,EAAE,8BAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,EAAE,EAAE,iBADR;AAEI,MAAA,CAAC,EAAE,qEAFP;AAGI,MAAA,kBAAkB,EAAE,mCAHxB;AAII,MAAA,gBAAgB,EAAE,MAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOI;AAAM,MAAA,QAAQ,EAAE,KAAKlC,UAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAE,cAAX;AAA2B,MAAA,SAAS,EAAE,MAAtC;AAA8C,MAAA,WAAW,EAAE,QAA3D;AACO,MAAA,kBAAkB,EAAE,OAD3B;AAEO,MAAA,SAAS,EAAE,kBAFlB;AAGO,MAAA,QAAQ,EAAE,KAAKN,qBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAE,WAAX;AAAwB,MAAA,SAAS,EAAE,MAAnC;AAA2C,MAAA,WAAW,EAAE,KAAxD;AACO,MAAA,kBAAkB,EAAE,OAD3B;AAEO,MAAA,SAAS,EAAE,kBAFlB;AAGO,MAAA,QAAQ,EAAE,KAAKC,oBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EASI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAE,QAAX;AAAqB,MAAA,SAAS,EAAE,MAAhC;AAAwC,MAAA,WAAW,EAAE,QAArD;AACO,MAAA,kBAAkB,EAAE,OAD3B;AAEO,MAAA,SAAS,EAAE,kBAFlB;AAGO,MAAA,QAAQ,EAAE,KAAKC,kBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,EAaI,oBAAC,OAAD;AACI,MAAA,EAAE,EAAE,YADR;AAEI,MAAA,SAAS,EAAE,QAFf;AAGI,MAAA,eAAe,EAAE,8BAHrB;AAII,MAAA,YAAY,EAAE,eAJlB;AAKI,MAAA,MAAM,EAAE,SALZ;AAMI,MAAA,mBAAmB,EAAE,EANzB;AAOI,MAAA,cAAc,EAAE,KAAKG,cAPzB;AAQI,MAAA,gBAAgB,EAAE,KAAKD,gBAR3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,EAuBI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAE,YAAX;AAAyB,MAAA,SAAS,EAAE,OAApC;AAA6C,MAAA,WAAW,EAAE,eAA1D;AACO,MAAA,kBAAkB,EAAE,aAD3B;AAEO,MAAA,SAAS,EAAE,kBAFlB;AAEqC,MAAA,QAAQ,EAAE,KAAKP,iBAFpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBJ,EA0BI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAE,gBAAX;AAA6B,MAAA,SAAS,EAAE,UAAxC;AACO,MAAA,WAAW,EAAE,cADpB;AAEO,MAAA,kBAAkB,EAAE,aAF3B;AAGO,MAAA,SAAS,EAAE,kBAHlB;AAGqC,MAAA,QAAQ,EAAE,KAAKE,oBAHpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BJ,EA8BI,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAE,6BAAX;AAA0C,MAAA,SAAS,EAAE,UAArD;AACO,MAAA,WAAW,EAAE,2BADpB;AAEO,MAAA,kBAAkB,EAAE,aAF3B;AAGO,MAAA,SAAS,EAAE,kBAHlB;AAIO,MAAA,QAAQ,EAAE,KAAKI,gCAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BJ,EAmCI;AAAK,MAAA,SAAS,EAAE,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,YAAD;AACI,MAAA,IAAI,EAAE,eADV;AAEI,MAAA,OAAO,EAAE,KAAKG,UAFlB;AAGI,MAAA,SAAS,EAAE,EAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAnCJ,CADJ,CAPJ,EAoDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApDJ,wBAqDmB;AAAG,MAAA,EAAE,EAAE,iBAAP;AAA0B,MAAA,SAAS,EAAE,IAArC;AAA2C,MAAA,IAAI,EAAE,kBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAArE,CArDnB,CADJ,CADJ,CADJ;AA8DH;;AApM4D;;AAuMjE,eAAevB,WAAf","sourcesContent":["import React, {ChangeEvent, FormEvent, ReactNode} from 'react';\nimport swal from 'sweetalert';\nimport passwordValidator from 'password-validator';\nimport Request from '../../API/Request';\nimport DropBox from '../General/DropBox';\nimport Input from \"../General/Input\";\nimport SubmitButton from \"../General/SubmitButton\";\nimport Header from \"../General/Header\";\n\ninterface InscriptionState {\n    email: string,\n    password: string,\n    passwordConfirmation: string,\n    firstName: string,\n    lastName: string,\n    pseudo: string,\n    validPassword: boolean,\n    formWasSubmitted: boolean,\n    icon: File | null,\n}\n\nclass Inscription extends React.Component<any, InscriptionState> {\n\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            email: '',\n            password: '',\n            passwordConfirmation: '',\n            firstName: '',\n            lastName: '',\n            pseudo: '',\n            validPassword: false,\n            formWasSubmitted: false,\n            icon: null\n        }\n\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.handleFirstNameChange = this.handleFirstNameChange.bind(this);\n        this.handleLastNameChange = this.handleLastNameChange.bind(this);\n        this.handlePseudoChange = this.handlePseudoChange.bind(this);\n        this.handlePasswordConfirmationChange = this.handlePasswordConfirmationChange.bind(this);\n        this.handleIconChange = this.handleIconChange.bind(this);\n        this.handleIconDrop = this.handleIconDrop.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.redirectToConnection = this.redirectToConnection.bind(this);\n        this.setState = this.setState.bind(this);\n    }\n\n    public handleEmailChange(event: ChangeEvent<HTMLInputElement>): void {\n        // @ts-ignore\n        this.setState({email: event.target.value});\n    }\n\n    public handlePasswordChange(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({password: event.target.value}, this.checkForm);\n    }\n\n    public handlePasswordConfirmationChange(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({passwordConfirmation: event.target.value}, this.checkForm);\n    }\n\n    public handleFirstNameChange(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({firstName: event.target.value});\n    }\n\n    public handleLastNameChange(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({lastName: event.target.value});\n    }\n\n    public handlePseudoChange(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({pseudo: event.target.value});\n    }\n\n    public passwordVerification(): boolean {\n        const schema = new passwordValidator();\n        schema\n            .is().min(8)\n            .is().max(100)\n            .has().uppercase()\n            .has().lowercase()\n            .has().digits()\n            .has().symbols()\n            .has().not().spaces();\n        return schema.validate(this.state.passwordConfirmation) && this.state.password === this.state.passwordConfirmation;\n    }\n\n    public checkForm(): boolean {\n        return this.passwordVerification() && this.state.firstName !== '' && this.state.lastName !== '' && this.state.pseudo !== '' && this.state.email !== '';\n    }\n\n    public redirectToConnection(data: any): void {\n        if ('success' === data['status']) {\n            swal({\n                title: 'Bravo !',\n                text: 'Tu es des nôtres à présent, connecte-toi vite pour' +\n                    'découvrir toutes les possibilités du site !!!',\n                icon: 'success',\n            })\n            // @ts-ignore\n            window.location = '/connexion/login';\n        } else {\n            this.setState({formWasSubmitted: true});\n        }\n    }\n\n    public submitForm(event: FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\n        event.preventDefault();\n\n        if (this.checkForm()) {\n            let formData = new FormData();\n            formData.append('first_name', this.state.firstName);\n            formData.append('last_name', this.state.lastName);\n            formData.append('pseudo', '' + this.state.pseudo);\n            formData.append('email', '' + this.state.email);\n            formData.append('password', '' + this.state.password);\n            formData.append('confirm_password', '' + this.state.passwordConfirmation);\n            // @ts-ignore\n            formData.append('file', this.state.icon);\n            new Request(\n                '/connection/register',\n                this.redirectToConnection,\n                'POST',\n                formData,\n                // @ts-ignore\n                this.state.icon.type,\n            );\n        } else {\n            this.setState({formWasSubmitted: true});\n            swal({\n                title: 'Formulaire incorrect',\n                text: 'Vérifie que ton mot de passe :\\n' +\n                    '   - Fait au moins 8 caractères\\n' +\n                    '   - Comporte des majuscules et des minuscules\\n' +\n                    '   - Contient chiffres et des caractères spéciaux\\n' +\n                    '   - Ne contient pas d\\'espaces\\n',\n                icon: 'error'\n            }).then((r: any) => null);\n        }\n    }\n\n    public handleIconChange(event: ChangeEvent<HTMLInputElement> | React.DragEvent<HTMLDivElement>): void {\n        event.preventDefault();\n        // @ts-ignore\n        this.setState({icon: event.target.files[0]});\n    }\n\n    public handleIconDrop(event: React.DragEvent<HTMLDivElement>): void {\n        event.preventDefault();\n        this.setState({icon: event.dataTransfer.files[0]});\n    }\n\n    render(): ReactNode {\n        return (\n            <section className={'content row inscription-bloc'}>\n                <div className={'container'}>\n                    <div>\n                        <Header\n                            h1={'Inscris-toi ici'}\n                            p={'Comme ça tu pourras accéder à notre super site de fiches de cours !'}\n                            containerClassName={'ml-0 ml-lg-2 ml-md-2 ml-sm-2 mb-5'}\n                            contentClassName={'pl-0'}\n                        />\n                        <form onSubmit={this.submitForm}>\n                            <div className={'row mt-5'}>\n                                <Input id={'input-prenom'} inputType={'text'} placeholder={'Prénom'}\n                                       formGroupClassName={'col-4'}\n                                       className={'connection-input'}\n                                       onChange={this.handleFirstNameChange}/>\n                                <Input id={'input-nom'} inputType={'text'} placeholder={'Nom'}\n                                       formGroupClassName={'col-4'}\n                                       className={'connection-input'}\n                                       onChange={this.handleLastNameChange}/>\n                                <Input id={'pseudo'} inputType={'text'} placeholder={'Pseudo'}\n                                       formGroupClassName={'col-4'}\n                                       className={'connection-input'}\n                                       onChange={this.handlePseudoChange}/>\n                                <DropBox\n                                    id={'input-icon'}\n                                    className={'col-12'}\n                                    labelNotDragged={'Glisse ta photo profil ici !'}\n                                    labelDragged={'Photo déposée'}\n                                    accept={'image/*'}\n                                    backgroundClassName={''}\n                                    handleFileDrop={this.handleIconDrop}\n                                    handleFileChange={this.handleIconChange}\n                                />\n                                <Input id={'input-mail'} inputType={'email'} placeholder={'Adresse email'}\n                                       formGroupClassName={'col-12 mt-5'}\n                                       className={'connection-input'}onChange={this.handleEmailChange}/>\n                                <Input id={'input-password'} inputType={'password'}\n                                       placeholder={'Mot de passe'}\n                                       formGroupClassName={'col-12 mt-5'}\n                                       className={'connection-input'}onChange={this.handlePasswordChange}/>\n                                <Input id={'input-password-confirmation'} inputType={'password'}\n                                       placeholder={'Confirmation mot de passe'}\n                                       formGroupClassName={'col-12 mt-5'}\n                                       className={'connection-input'}\n                                       onChange={this.handlePasswordConfirmationChange}/>\n                                <div className={'col-12 mt-5'}>\n                                    <SubmitButton\n                                        text={'Inscris-toi !'}\n                                        onClick={this.submitForm}\n                                        className={''}\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                        <br/>\n                        Déja Inscrit ? <a id={'redirect-button'} className={'h5'} href={'/connexion/login'}><u>Connecte\n                        toi ! </u></a>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Inscription;\n"]},"metadata":{},"sourceType":"module"}