{"ast":null,"code":"var lib = require('./lib');\n\nvar error = require('./constants').error;\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\n\n\nfunction _validateLength(num) {\n  if (isNaN(Number(num))) {\n    throw new Error(error.length);\n  }\n}\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\n\n\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} func - Property name\n * @param {array} args - arguments for the func property\n */\n\n\nfunction _register(func, args) {\n  // Add property to the schema\n  this.properties.push({\n    method: func,\n    arguments: args\n  });\n  return this;\n}\n\nclass PasswordValidator {\n  /**\n   * Creates a password-validator schema\n   *\n   * @constructor\n   */\n  constructor() {\n    this.properties = [];\n  }\n  /**\n   * Method to validate the password against schema\n   *\n   * @param {string} pwd - password to valdiate\n   * @param {object} options - optional options to configure validation\n   * @param {boolean} [options.list] - asks for a list of validation\n   *           failures instead of just true/false\n   * @return {boolean|array} Boolean value indicting the validity\n   *           of the password as per schema, if 'options.list'\n   *           is not set. Otherwise, it returns an array of\n   *           property names which failed validations\n   */\n\n\n  validate(pwd, options) {\n    this.list = Boolean(options && options.list);\n    this.password = String(pwd);\n    this.positive = true;\n\n    if (this.list) {\n      return this.properties.reduce((errorList, property) => {\n        // Applies all validations defined in lib one by one\n        if (!_isPasswordValidFor.call(this, property)) {\n          // If the validation for a property fails,\n          // add it to the error list\n          return errorList.concat(property.method);\n        }\n\n        return errorList;\n      }, []);\n    }\n\n    return this.properties.every(_isPasswordValidFor.bind(this));\n  }\n  /**\n   * Rule to mandate the presence of letters in the password\n   */\n\n\n  letters() {\n    return _register.call(this, 'letters', arguments);\n  }\n  /**\n   * Rule to mandate the presence of digits in the password\n   */\n\n\n  digits() {\n    return _register.call(this, 'digits', arguments);\n  }\n  /**\n   * Rule to mandate the presence of symbols in the password\n   */\n\n\n  symbols() {\n    return _register.call(this, 'symbols', arguments);\n  }\n  /**\n   * Rule to specify a minimum length of the password\n   *\n   * @param {number} num - minimum length\n   */\n\n\n  min(num) {\n    _validateLength(num);\n\n    return _register.call(this, 'min', arguments);\n  }\n  /**\n   * Rule to specify a maximum length of the password\n   *\n   * @param {number} num - maximum length\n   */\n\n\n  max(num) {\n    _validateLength(num);\n\n    return _register.call(this, 'max', arguments);\n  }\n  /**\n   * Rule to mandate the presence of lowercase letters in the password\n   */\n\n\n  lowercase() {\n    return _register.call(this, 'lowercase', arguments);\n  }\n  /**\n   * Rule to mandate the presence of uppercase letters in the password\n   */\n\n\n  uppercase() {\n    return _register.call(this, 'uppercase', arguments);\n  }\n  /**\n   * Rule to mandate the presence of space in the password\n   * It can be used along with 'not' to not allow spaces\n   * in the password\n   */\n\n\n  spaces() {\n    return _register.call(this, 'spaces', arguments);\n  }\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'has' is also used\n   * to make the api readable and chainable\n   */\n\n\n  has() {\n    return _register.call(this, 'has', arguments);\n  }\n  /**\n   * Rule to invert the next applied rules.\n   * All the rules applied after 'not' will have opposite effect,\n   * until 'has' rule is applied\n   */\n\n\n  not() {\n    return _register.call(this, 'not', arguments);\n  }\n  /**\n   * Rule to invert the effects of 'not'\n   * Apart from that, 'is' is also used\n   * to make the api readable and chainable\n   */\n\n\n  is() {\n    return _register.call(this, 'is', arguments);\n  }\n  /**\n   * Rule to whitelist words to be used as password\n   *\n   * @param {array} list - list of values allowed\n   */\n\n\n  oneOf() {\n    return _register.call(this, 'oneOf', arguments);\n  }\n\n}\n\nmodule.exports = PasswordValidator;","map":null,"metadata":{},"sourceType":"script"}