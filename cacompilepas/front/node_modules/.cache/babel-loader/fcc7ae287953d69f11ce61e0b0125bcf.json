{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/Connection/Connection.tsx\";\nimport React from 'react';\nimport Request from '../../API/Request';\nimport '../../css/Connection.css';\nimport Input from \"../General/Input\";\n\nclass Connection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.email = void 0;\n    this.password = void 0;\n    this.email = '';\n    this.password = '';\n    this.state = {\n      status: '',\n      token: '',\n      tokenExists: false,\n      formWasSubmitted: false\n    };\n    this.referrerIsNotConnection = this.referrerIsNotConnection.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.updateConnectStatus = this.updateConnectStatus.bind(this);\n    this.setState = this.setState.bind(this);\n    this.checkIfAlreadyConnected = this.checkIfAlreadyConnected.bind(this);\n  } // Check if token is still valid\n\n\n  componentDidMount() {\n    if (undefined !== localStorage.getItem('token') && '' !== localStorage.getItem('token')) {\n      new Request('/connection/verification', this.checkIfAlreadyConnected);\n    }\n  }\n\n  checkIfAlreadyConnected(data) {\n    this.setState({\n      tokenExists: data['token_exists']\n    });\n\n    if (false === this.state.tokenExists) {\n      localStorage.setItem('token', '');\n    }\n  } // Check if referrer is not '/connexion/login' in order to prevent a redirecting infinite loop\n\n\n  referrerIsNotConnection() {\n    // @ts-ignore\n    return document.referrer.split(/\\//)[3] !== 'connexion' && document.referrer.split(/\\//)[4] !== 'login';\n  }\n\n  handleEmailChange(event) {\n    // @ts-ignore\n    this.email = event.target.value;\n  }\n\n  handlePasswordChange(event) {\n    // @ts-ignore\n    this.password = event.target.value;\n  }\n\n  updateConnectStatus(data) {\n    this.setState({\n      status: '' + data['connected']\n    });\n    localStorage.setItem('token', data['token']);\n  }\n\n  submitForm(event) {\n    event.preventDefault();\n    new Request('/connection/login', this.updateConnectStatus, 'POST', {\n      email: this.email,\n      password: this.password\n    });\n    this.setState({\n      formWasSubmitted: true\n    });\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: \"content row connection-bloc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, (() => {\n      // If token exists and user connected, redirect to referrer\n      // Else if form was submitted and credentials were incorrect,\n      // display an error message\n      if (undefined !== localStorage.getItem('token') || '' !== localStorage.getItem('token')) {\n        if ('true' === this.state.status || true === this.state.tokenExists) {\n          if (this.referrerIsNotConnection()) {\n            // @ts-ignore\n            window.location = this.props.referrer;\n          } else {\n            // @ts-ignore\n            window.location = '/';\n          }\n        } else if ('false' === this.state.status && true === this.state.formWasSubmitted) {\n          return React.createElement(\"div\", {\n            className: 'col-lg-3 col-sm-11 mt-0 mb-lg-4 mb-md-4 mb-sm-4 mb-xs-4 rounded-1 container-fluid p-0',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: 'container-fluid col-12 p-0',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: 'col-12 connection-error',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }, \"Identifiants incorrects\")));\n        }\n      }\n    })()), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      id: \"connectForm\",\n      className: \"col-lg-4 col-lg-offset-4 col-sm\",\n      onSubmit: this.submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'row pl-5',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'row container-fluid',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-12',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: 'input-mail',\n      inputType: 'email',\n      placeholder: 'Adresse email',\n      checked: false,\n      className: '',\n      onChange: this.handleEmailChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: 'row container-fluid',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-12 mt-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: 'input-password',\n      inputType: 'password',\n      placeholder: 'Mot de passe',\n      checked: false,\n      className: '',\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })))), React.createElement(ButtonConnection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nclass ConnectionInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.className = void 0;\n    this.className = \"form-control text-center mt-0 rounded-1 \" + this.props.className;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: this.props.inputType,\n      className: this.className,\n      id: this.props.id,\n      placeholder: this.props.placeholder,\n      onFocus: e => e.target.placeholder = \"\",\n      onBlur: e => e.target.placeholder = this.props.placeholder,\n      onChange: this.props.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }));\n  }\n\n}\n\nclass ButtonConnection extends React.Component {\n  render() {\n    return React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-default btn-transparent mt-0 rounded-1 custom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Connexion\");\n  }\n\n}\n\nexport default Connection;","map":{"version":3,"sources":["/usr/src/app/client/src/View/Connection/Connection.tsx"],"names":["React","Request","Input","Connection","Component","constructor","props","email","password","state","status","token","tokenExists","formWasSubmitted","referrerIsNotConnection","bind","handleEmailChange","handlePasswordChange","submitForm","updateConnectStatus","setState","checkIfAlreadyConnected","componentDidMount","undefined","localStorage","getItem","data","setItem","document","referrer","split","event","target","value","preventDefault","render","window","location","ConnectionInput","className","inputType","id","placeholder","e","onChange","ButtonConnection"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, FormEvent, ReactNode} from 'react';\nimport Request from '../../API/Request';\nimport '../../css/Connection.css';\nimport Input from \"../General/Input\";\n\ninterface ConnectionStates {\n    // Pending (''), connected ('true') or not connected ('false')\n    status: string,\n    token: string,\n    tokenExists: boolean,\n    formWasSubmitted: boolean,\n}\n\nclass Connection extends React.Component<{ referrer: string }, ConnectionStates> {\n    private email: string;\n    private password: string;\n\n    constructor(props: any) {\n        super(props);\n        this.email = '';\n        this.password = '';\n        this.state = {\n            status: '',\n            token: '',\n            tokenExists: false,\n            formWasSubmitted: false,\n        }\n        this.referrerIsNotConnection = this.referrerIsNotConnection.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.updateConnectStatus = this.updateConnectStatus.bind(this);\n        this.setState = this.setState.bind(this);\n        this.checkIfAlreadyConnected = this.checkIfAlreadyConnected.bind(this);\n    }\n\n    // Check if token is still valid\n    public componentDidMount(): void {\n        if (undefined !== localStorage.getItem('token') && '' !== localStorage.getItem('token')) {\n            new Request(\n                '/connection/verification',\n                this.checkIfAlreadyConnected,\n            );\n        }\n    }\n\n    public checkIfAlreadyConnected(data: any): void {\n        this.setState({tokenExists: data['token_exists']});\n        if (false === this.state.tokenExists) {\n            localStorage.setItem('token', '');\n        }\n    }\n\n    // Check if referrer is not '/connexion/login' in order to prevent a redirecting infinite loop\n    public referrerIsNotConnection(): boolean {\n        // @ts-ignore\n        return document.referrer.split(/\\//)[3] !== 'connexion' && document.referrer.split(/\\//)[4] !== 'login';\n    }\n\n    public handleEmailChange(event: ChangeEvent<HTMLInputElement>): void {\n        // @ts-ignore\n        this.email = event.target.value;\n    }\n\n    public handlePasswordChange(event: ChangeEvent<HTMLInputElement>): void {\n        // @ts-ignore\n        this.password = event.target.value;\n    }\n\n    public updateConnectStatus(data: any): void {\n        this.setState({status: '' + data['connected']});\n        localStorage.setItem('token', data['token']);\n    }\n\n    public submitForm(event: FormEvent<HTMLFormElement>): void {\n        event.preventDefault();\n        new Request(\n            '/connection/login',\n            this.updateConnectStatus,\n            'POST',\n            {\n                email: this.email,\n                password: this.password\n            },\n        );\n        this.setState({formWasSubmitted: true});\n    }\n\n    render(): ReactNode {\n        return (\n            <section className=\"content row connection-bloc\">\n                <div className=\"container\">\n                    <div className={\"row\"}>\n                        {(() => {\n                            // If token exists and user connected, redirect to referrer\n                            // Else if form was submitted and credentials were incorrect,\n                            // display an error message\n                            if (undefined !== localStorage.getItem('token') || '' !== localStorage.getItem('token')) {\n                                if ('true' === this.state.status || true === this.state.tokenExists) {\n                                    if (this.referrerIsNotConnection()) {\n                                        // @ts-ignore\n                                        window.location = this.props.referrer;\n                                    } else {\n                                        // @ts-ignore\n                                        window.location = '/';\n                                    }\n                                } else if ('false' === this.state.status && true === this.state.formWasSubmitted) {\n                                    return (\n                                        <div\n                                            className={'col-lg-3 col-sm-11 mt-0 mb-lg-4 mb-md-4 mb-sm-4 mb-xs-4 rounded-1 container-fluid p-0'}\n                                        >\n                                            <div className={'container-fluid col-12 p-0'}>\n                                                <div className={'col-12 connection-error'}>\n                                                    Identifiants incorrects\n                                                </div>\n                                            </div>\n                                        </div>\n                                    );\n                                }\n                            }\n                        })()}\n                    </div>\n                    <div className={\"row\"}>\n                        <form id={\"connectForm\"} className=\"col-lg-4 col-lg-offset-4 col-sm\" onSubmit={this.submitForm}>\n                            <div className={'row pl-5'}>\n                                <div className={'row container-fluid'}>\n                                    <div className={'col-12'}>\n                                        <Input\n                                            id={'input-mail'}\n                                            inputType={'email'}\n                                            placeholder={'Adresse email'}\n                                            checked={false}\n                                            className={''}\n                                            onChange={this.handleEmailChange}\n                                        />\n                                    </div>\n                                </div>\n                                <div className={'row container-fluid'}>\n                                    <div className={'col-12 mt-4'}>\n                                        <Input\n                                            id={'input-password'}\n                                            inputType={'password'}\n                                            placeholder={'Mot de passe'}\n                                            checked={false}\n                                            className={''}\n                                            onChange={this.handlePasswordChange}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <ButtonConnection/>\n                        </form>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\ninterface ConnectionInputProps {\n    id: string;\n    inputType: string;\n    placeholder: string;\n    className: string;\n    onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nclass ConnectionInput extends React.Component<ConnectionInputProps, {}> {\n\n    private readonly className: string;\n\n    constructor(props: ConnectionInputProps) {\n        super(props);\n        this.className = \"form-control text-center mt-0 rounded-1 \" + this.props.className;\n    }\n\n    public render(): ReactNode {\n        return <div className=\"form-group\">\n            <input type={this.props.inputType}\n                   className={this.className}\n                   id={this.props.id}\n                   placeholder={this.props.placeholder}\n                   onFocus={e => e.target.placeholder = \"\"}\n                   onBlur={e => e.target.placeholder = this.props.placeholder}\n                   onChange={this.props.onChange}\n            />\n        </div>\n    }\n}\n\nclass ButtonConnection extends React.Component<{}, {}> {\n    public render() {\n        return (\n            <button type=\"submit\" className=\"btn btn-default btn-transparent mt-0 rounded-1 custom\">Connexion</button>\n        )\n    }\n}\n\nexport default Connection;\n"]},"metadata":{},"sourceType":"module"}