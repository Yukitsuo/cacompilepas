{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/Connection/Connection.tsx\";\nimport React from 'react';\nimport Request from '../../API/Request';\nimport '../../css/Connection.css';\nimport Input from \"../General/Input\";\nimport SubmitButton from \"../General/SubmitButton\";\nimport Header from \"../General/Header\";\n\nclass Connection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      status: '',\n      token: '',\n      tokenExists: false,\n      formWasSubmitted: false\n    };\n    this.referrerIsNotConnection = this.referrerIsNotConnection.bind(this);\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.submit = this.submit.bind(this);\n    this.updateConnectStatus = this.updateConnectStatus.bind(this);\n    this.setState = this.setState.bind(this);\n    this.checkIfAlreadyConnected = this.checkIfAlreadyConnected.bind(this);\n  } // Check if token is still valid\n\n\n  componentDidMount() {\n    if (undefined !== localStorage.getItem('token') && '' !== localStorage.getItem('token')) {\n      new Request('/connection/verification', this.checkIfAlreadyConnected);\n    }\n  }\n\n  checkIfAlreadyConnected(data) {\n    this.setState({\n      tokenExists: data['token_exists']\n    });\n\n    if (false === this.state.tokenExists) {\n      localStorage.setItem('token', '');\n    }\n  } // Check if referrer is not '/connexion/login' in order to prevent a redirecting infinite loop\n\n\n  referrerIsNotConnection() {\n    // @ts-ignore\n    return document.referrer.split(/\\//)[3] !== 'connexion' && document.referrer.split(/\\//)[4] !== 'login';\n  }\n\n  handleEmailChange(event) {\n    // @ts-ignore\n    this.setState({\n      email: event.target.value\n    });\n  }\n\n  handlePasswordChange(event) {\n    // @ts-ignore\n    this.setState({\n      password: event.target.value\n    });\n  }\n\n  updateConnectStatus(data) {\n    this.setState({\n      status: '' + data['connected']\n    }, () => this.setState({\n      formWasSubmitted: true\n    }, () => localStorage.setItem('token', data['token'])));\n  }\n\n  submit(event) {\n    event.preventDefault();\n    new Request('/connection/login', this.updateConnectStatus, 'POST', {\n      email: this.state.email,\n      password: this.state.password\n    });\n  }\n\n  render() {\n    return React.createElement(\"section\", {\n      className: 'content row connection-bloc',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'container-fluid',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Header, {\n      h1: 'Connecte-toi ici',\n      p: 'Comme ça tu pourras accéder à notre super site de fiches de cours !',\n      containerClassName: 'ml-0 ml-lg-2 ml-md-2 ml-sm-2 mb-5',\n      contentClassName: 'offset-lg-3 offset-md-2 pl-0 pl-lg-0 pl-md-4 pl-sm-3',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'row',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, (() => {\n      // If token exists and user connected, redirect to referrer\n      // Else if form was submitted and credentials were incorrect,\n      // display an error message\n      if (undefined !== localStorage.getItem('token') || '' !== localStorage.getItem('token')) {\n        if ('true' === this.state.status || true === this.state.tokenExists) {\n          if (this.referrerIsNotConnection()) {\n            // @ts-ignore\n            window.location = this.props.referrer;\n          } else {\n            // @ts-ignore\n            window.location = '/';\n          }\n        } else if ('false' === this.state.status && true === this.state.formWasSubmitted) {\n          return React.createElement(\"div\", {\n            className: 'container-fluid col-lg-3 col-md-8 col-sm-11 mt-0 mb-4 p-2',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: 'col-12 p-0',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: 'col-12 p-3 rounded bg-danger connection-error',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, \"Identifiants incorrects\")));\n        }\n      }\n    })()), React.createElement(\"div\", {\n      className: 'row',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      id: 'connect-form',\n      className: 'col-lg-6 col-md-8 col-sm-12 offset-lg-3 pr-sm-5 pl-lg-4 pl-sm-5 container-fluid',\n      onSubmit: this.submit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'row pl-4',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'row container-fluid pr-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-12 p-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: 'input-mail',\n      inputType: 'email',\n      placeholder: 'Adresse email',\n      checked: false,\n      className: 'connection-input',\n      onChange: this.handleEmailChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: 'row container-fluid mt-5 pr-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'col-12 p-0',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Input, {\n      id: 'input-password',\n      inputType: 'password',\n      placeholder: 'Mot de passe',\n      checked: false,\n      className: 'connection-input',\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })))), React.createElement(SubmitButton, {\n      text: 'Connexion',\n      onClick: this.submit,\n      className: 'mt-5 connection-button',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Connection;","map":{"version":3,"sources":["/usr/src/app/client/src/View/Connection/Connection.tsx"],"names":["React","Request","Input","SubmitButton","Header","Connection","Component","constructor","props","state","email","password","status","token","tokenExists","formWasSubmitted","referrerIsNotConnection","bind","handleEmailChange","handlePasswordChange","submit","updateConnectStatus","setState","checkIfAlreadyConnected","componentDidMount","undefined","localStorage","getItem","data","setItem","document","referrer","split","event","target","value","preventDefault","render","window","location"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, FormEvent, ReactElement, ReactNode} from 'react';\nimport Request from '../../API/Request';\nimport '../../css/Connection.css';\nimport Input from \"../General/Input\";\nimport SubmitButton from \"../General/SubmitButton\";\nimport Header from \"../General/Header\";\n\ninterface ConnectionStates {\n    email: string,\n    password: string,\n    // Pending (''), connected ('true') or not connected ('false')\n    status: string,\n    token: string,\n    tokenExists: boolean,\n    formWasSubmitted: boolean,\n}\n\nclass Connection extends React.Component<{ referrer: string }, ConnectionStates> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            status: '',\n            token: '',\n            tokenExists: false,\n            formWasSubmitted: false,\n        }\n        this.referrerIsNotConnection = this.referrerIsNotConnection.bind(this);\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\n        this.submit = this.submit.bind(this);\n        this.updateConnectStatus = this.updateConnectStatus.bind(this);\n        this.setState = this.setState.bind(this);\n        this.checkIfAlreadyConnected = this.checkIfAlreadyConnected.bind(this);\n    }\n\n    // Check if token is still valid\n    public componentDidMount(): void {\n        if (undefined !== localStorage.getItem('token') && '' !== localStorage.getItem('token')) {\n            new Request(\n                '/connection/verification',\n                this.checkIfAlreadyConnected,\n            );\n        }\n    }\n\n    public checkIfAlreadyConnected(data: any): void {\n        this.setState({tokenExists: data['token_exists']});\n        if (false === this.state.tokenExists) {\n            localStorage.setItem('token', '');\n        }\n    }\n\n    // Check if referrer is not '/connexion/login' in order to prevent a redirecting infinite loop\n    public referrerIsNotConnection(): boolean {\n        // @ts-ignore\n        return document.referrer.split(/\\//)[3] !== 'connexion' && document.referrer.split(/\\//)[4] !== 'login';\n    }\n\n    public handleEmailChange(event: ChangeEvent<HTMLInputElement>): void {\n        // @ts-ignore\n        this.setState({email: event.target.value});\n    }\n\n    public handlePasswordChange(event: ChangeEvent<HTMLInputElement>): void {\n        // @ts-ignore\n        this.setState({password: event.target.value});\n    }\n\n    public updateConnectStatus(data: any): void {\n        this.setState(\n            {status: '' + data['connected']},\n            () => this.setState(\n                {formWasSubmitted: true},\n                () => localStorage.setItem('token', data['token'])\n            )\n        );\n    }\n\n    public submit(event: React.MouseEvent<HTMLButtonElement, MouseEvent> | FormEvent<HTMLFormElement>): void {\n        event.preventDefault();\n        new Request(\n            '/connection/login',\n            this.updateConnectStatus,\n            'POST',\n            {\n                email: this.state.email,\n                password: this.state.password\n            },\n        );\n    }\n\n    render(): ReactNode {\n        return (\n            <section className={'content row connection-bloc'}>\n                <div className={'container-fluid'}>\n                    <Header\n                        h1={'Connecte-toi ici'}\n                        p={'Comme ça tu pourras accéder à notre super site de fiches de cours !'}\n                        containerClassName={'ml-0 ml-lg-2 ml-md-2 ml-sm-2 mb-5'}\n                        contentClassName={'offset-lg-3 offset-md-2 pl-0 pl-lg-0 pl-md-4 pl-sm-3'}\n                    />\n                    <div className={'row'}>\n                        {(() => {\n                            // If token exists and user connected, redirect to referrer\n                            // Else if form was submitted and credentials were incorrect,\n                            // display an error message\n                            if (undefined !== localStorage.getItem('token') || '' !== localStorage.getItem('token')) {\n                                if ('true' === this.state.status || true === this.state.tokenExists) {\n                                    if (this.referrerIsNotConnection()) {\n                                        // @ts-ignore\n                                        window.location = this.props.referrer;\n                                    } else {\n                                        // @ts-ignore\n                                        window.location = '/';\n                                    }\n                                } else if ('false' === this.state.status && true === this.state.formWasSubmitted) {\n                                    return (\n                                        <div\n                                            className={'container-fluid col-lg-3 col-md-8 col-sm-11 mt-0 mb-4 p-2'}\n                                        >\n                                            <div className={'col-12 p-0'}>\n                                                <div className={'col-12 p-3 rounded bg-danger connection-error'}>\n                                                    Identifiants incorrects\n                                                </div>\n                                            </div>\n                                        </div>\n                                    );\n                                }\n                            }\n                        })()}\n                    </div>\n                    <div className={'row'}>\n                        <form\n                            id={'connect-form'}\n                            className={'col-lg-6 col-md-8 col-sm-12 offset-lg-3 pr-sm-5 pl-lg-4 pl-sm-5 container-fluid'}\n                            onSubmit={this.submit}\n                        >\n                            <div className={'row pl-4'}>\n                                <div className={'row container-fluid pr-0'}>\n                                    <div className={'col-12 p-0'}>\n                                        <Input\n                                            id={'input-mail'}\n                                            inputType={'email'}\n                                            placeholder={'Adresse email'}\n                                            checked={false}\n                                            className={'connection-input'}\n                                            onChange={this.handleEmailChange}\n                                        />\n                                    </div>\n                                </div>\n                                <div className={'row container-fluid mt-5 pr-0'}>\n                                    <div className={'col-12 p-0'}>\n                                        <Input\n                                            id={'input-password'}\n                                            inputType={'password'}\n                                            placeholder={'Mot de passe'}\n                                            checked={false}\n                                            className={'connection-input'}\n                                            onChange={this.handlePasswordChange}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            <SubmitButton\n                                text={'Connexion'}\n                                onClick={this.submit}\n                                className={'mt-5 connection-button'}\n                            />\n                        </form>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Connection;\n"]},"metadata":{},"sourceType":"module"}