{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/client/src/View/Hashtag/HashtagInput.tsx\";\nimport React from \"react\";\nimport Hashtag from \"./Hashtag\";\n\nclass HashtagInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.input = void 0;\n    this.state = {\n      text: '',\n      hashtags: [],\n      widths: [],\n      totalWidth: 0\n    };\n    this.input = React.createRef();\n    this.init();\n  }\n\n  init() {\n    this.write = this.write.bind(this);\n    this.renderHashtags = this.renderHashtags.bind(this);\n    this.addHashtag = this.addHashtag.bind(this);\n    this.deleteHashtags = this.deleteHashtags.bind(this);\n    this.updateHashtags = this.updateHashtags.bind(this);\n    this.updateIndent = this.updateIndent.bind(this);\n    this.updateTotalWidth = this.updateTotalWidth.bind(this);\n    this.deleteHashtagByClick = this.deleteHashtagByClick.bind(this);\n    this.updateView = this.updateView.bind(this);\n  }\n\n  write(event) {\n    this.setState({\n      text: event.target.value\n    });\n    this.props.updateText(event.target.value); // @ts-ignore\n\n    if ('' === this.input.current.value && 0 === this.state.hashtags.length) {\n      this.props.onUpdate(true);\n    } else {\n      this.props.onUpdate(false);\n    }\n\n    this.props.updateHashtagsView(this.renderHashtags());\n  }\n\n  componentDidMount() {\n    this.updateIndent();\n  }\n\n  updateIndent() {\n    this.forceUpdate(() => {\n      let x = 0 === this.state.totalWidth ? this.props.baseIndent : this.props.baseIndent - 3 + this.state.totalWidth - (this.state.hashtags.length - 1) * 10; // @ts-ignore\n\n      this.input.current.style.textIndent = x + 'px'; // @ts-ignore\n\n      this.input.current.value = this.state.text;\n    });\n  }\n\n  addHashtag(text) {\n    if (!this.state.hashtags.includes(text) && text.includes('#')) {\n      let tags = text.split(/#/);\n      tags.map(tag => {\n        if (tag.includes('#')) {\n          let tags = tag.split('#');\n          this.state.hashtags.push(text.substr(1, text.length - 1));\n          this.state.widths.push(0);\n          this.setState((state, props) => {\n            return {\n              text: state.text.replace(tag, '')\n            };\n          });\n          this.props.updateText('');\n          this.props.updateHashtags(this.state.hashtags); // @ts-ignore\n\n          this.forceUpdate(() => this.input.current.value.replace(tag, ''));\n          this.updateView();\n        }\n      });\n    }\n  }\n\n  updateView() {\n    this.setState((state, props) => {\n      return {\n        totalWidth: 0 === state.widths.length ? 0 : state.widths.map(width => width).reduce((width, nextWidth) => width + nextWidth)\n      };\n    });\n    this.updateIndent();\n    this.props.updateHashtagsView(this.renderHashtags());\n  }\n\n  deleteHashtagByClick(event) {\n    let content;\n    let target = event.target;\n\n    if (undefined === target.parentElement.firstElementChild.innerText) {\n      content = target.parentElement.parentElement.parentElement.firstElementChild.innerText;\n\n      if ('' === content) {\n        content = target.parentElement.parentElement.parentElement.parentElement.firstElementChild.firstElementChild.innerText;\n\n        if ('' === content) {\n          content = target.parentElement.parentElement.firstElementChild.innerText;\n        }\n      }\n    } else {\n      content = target.parentElement.firstElementChild.innerText;\n    }\n\n    content = content.substr(1, content.length - 1);\n    this.deleteHashtags(content);\n  }\n\n  deleteHashtagOnKeyPressed(text) {\n    this.deleteHashtags(text);\n  }\n\n  deleteHashtags(text) {\n    let index = this.state.hashtags.indexOf(text);\n    this.state.hashtags.splice(index, 1);\n    this.state.widths.splice(index, 1);\n    this.props.updateText('');\n    this.props.updateHashtags(this.state.hashtags);\n    this.updateView();\n\n    if ('' === this.state.text && 0 === this.state.hashtags.length) {\n      this.props.onUpdate(true);\n    }\n  }\n\n  async updateHashtags(event) {\n    if (13 === event.keyCode) {\n      event.preventDefault(); // @ts-ignore\n\n      this.addHashtag(event.target.value);\n    } else if (8 === event.keyCode) {\n      // @ts-ignore\n      if ('' === this.input.current.value && 0 !== this.state.hashtags.length || 0 === this.input.current.selectionStart) {\n        event.preventDefault();\n        this.deleteHashtags(this.state.hashtags[this.state.hashtags.length - 1]);\n      }\n    }\n\n    this.updateView();\n  }\n\n  updateTotalWidth(text, hashtagBoxWidth) {\n    this.setState((state, props) => {\n      state.widths[this.state.hashtags.indexOf(text)] = hashtagBoxWidth;\n      return {\n        totalWidth: state.widths.map(width => width).reduce((width, nextWidth) => width + nextWidth)\n      };\n    }, () => document.getElementById('search').value = '');\n    this.updateIndent();\n  }\n\n  renderHashtags() {\n    return this.state.hashtags.map(hashtag => {\n      return React.createElement(Hashtag, {\n        key: hashtag,\n        text: hashtag,\n        updateWidth: this.updateTotalWidth,\n        isRemovable: true,\n        remove: this.deleteHashtagByClick,\n        className: this.props.hashtagClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"input\", {\n      id: this.props.id,\n      className: this.props.className,\n      type: this.props.type,\n      onChange: event => this.write(event),\n      value: this.state.text,\n      onKeyDown: this.updateHashtags,\n      ref: this.input,\n      placeholder: this.props.placeholder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default HashtagInput;","map":{"version":3,"sources":["/usr/src/app/client/src/View/Hashtag/HashtagInput.tsx"],"names":["React","Hashtag","HashtagInput","Component","constructor","props","input","state","text","hashtags","widths","totalWidth","createRef","init","write","bind","renderHashtags","addHashtag","deleteHashtags","updateHashtags","updateIndent","updateTotalWidth","deleteHashtagByClick","updateView","event","setState","target","value","updateText","current","length","onUpdate","updateHashtagsView","componentDidMount","forceUpdate","x","baseIndent","style","textIndent","includes","tags","split","map","tag","push","substr","replace","width","reduce","nextWidth","content","undefined","parentElement","firstElementChild","innerText","deleteHashtagOnKeyPressed","index","indexOf","splice","keyCode","preventDefault","selectionStart","hashtagBoxWidth","document","getElementById","hashtag","hashtagClassName","render","id","className","type","placeholder"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, ReactNode, Ref} from \"react\";\nimport Hashtag from \"./Hashtag\";\n\ninterface HashtagInputProps {\n    id: string,\n    className: string,\n    type: string,\n    baseIndent: number,\n    onUpdate: any,\n    updateHashtagsView: any,\n    updateHashtags: any,\n    updateText: any,\n    placeholder?: string,\n    hashtagClassName: string,\n}\n\ninterface HashTagInputState {\n    text: string,\n    hashtags: string[],\n    widths: number[],\n    totalWidth: number,\n}\n\nclass HashtagInput extends React.Component<HashtagInputProps, HashTagInputState> {\n    private input: Ref<HTMLInputElement>;\n\n    public constructor(props: HashtagInputProps) {\n        super(props);\n        this.state = {\n            text: '',\n            hashtags: [],\n            widths: [],\n            totalWidth: 0,\n        }\n        this.input = React.createRef();\n        this.init();\n    }\n\n    public init(): void {\n        this.write = this.write.bind(this);\n        this.renderHashtags = this.renderHashtags.bind(this);\n        this.addHashtag = this.addHashtag.bind(this);\n        this.deleteHashtags = this.deleteHashtags.bind(this);\n        this.updateHashtags = this.updateHashtags.bind(this);\n        this.updateIndent = this.updateIndent.bind(this);\n        this.updateTotalWidth = this.updateTotalWidth.bind(this);\n        this.deleteHashtagByClick = this.deleteHashtagByClick.bind(this);\n        this.updateView = this.updateView.bind(this);\n    }\n\n    public write(event: ChangeEvent<HTMLInputElement>): void {\n        this.setState({text: event.target.value});\n        this.props.updateText(event.target.value);\n        // @ts-ignore\n        if ('' === this.input.current.value && 0 === this.state.hashtags.length) {\n            this.props.onUpdate(true);\n        } else {\n            this.props.onUpdate(false);\n        }\n        this.props.updateHashtagsView(this.renderHashtags());\n    }\n\n    public componentDidMount(): void {\n        this.updateIndent();\n    }\n\n    public updateIndent(): void {\n        this.forceUpdate(() => {\n            let x: number = 0 === this.state.totalWidth ? this.props.baseIndent : this.props.baseIndent - 3 + this.state.totalWidth - ((this.state.hashtags.length - 1) * 10);\n            // @ts-ignore\n            this.input.current.style.textIndent = x + 'px';\n            // @ts-ignore\n            this.input.current.value = this.state.text;\n        });\n    }\n\n    public addHashtag(text: string): void {\n        if (!this.state.hashtags.includes(text) && text.includes('#')) {\n            let tags: string[] = text.split(/#/);\n            tags.map(tag => {\n                if (tag.includes('#')) {\n                    let tags = tag.split('#');\n                    this.state.hashtags.push(text.substr(1, text.length - 1));\n                    this.state.widths.push(0);\n                    this.setState((state, props) => {\n                        return {text: state.text.replace(tag, '')};\n                    });\n                    this.props.updateText('');\n                    this.props.updateHashtags(this.state.hashtags);\n                    // @ts-ignore\n                    this.forceUpdate(() => this.input.current.value.replace(tag, ''));\n                    this.updateView();\n                }\n            });\n        }\n    }\n\n    public updateView(): void {\n        this.setState((state, props) => {\n            return {totalWidth: 0 === state.widths.length ? 0 : state.widths.map((width: number) => width).reduce((width: number, nextWidth: number) => width + nextWidth)};\n        });\n        this.updateIndent();\n        this.props.updateHashtagsView(this.renderHashtags());\n    }\n\n    public deleteHashtagByClick(event: React.MouseEvent<HTMLOrSVGElement>): void {\n        let content: string;\n        let target: any = event.target;\n        if (undefined === target.parentElement.firstElementChild.innerText) {\n            content = target.parentElement.parentElement.parentElement.firstElementChild.innerText;\n            if ('' === content) {\n                content = target.parentElement.parentElement.parentElement.parentElement.firstElementChild.firstElementChild.innerText;\n                if ('' === content) {\n                    content = target.parentElement.parentElement.firstElementChild.innerText;\n                }\n            }\n        } else {\n            content = target.parentElement.firstElementChild.innerText;\n        }\n        content = content.substr(1, content.length - 1);\n        this.deleteHashtags(content);\n    }\n\n    public deleteHashtagOnKeyPressed(text: string): void {\n        this.deleteHashtags(text);\n    }\n\n    public deleteHashtags(text: string): void {\n        let index: number = this.state.hashtags.indexOf(text);\n        this.state.hashtags.splice(index, 1);\n        this.state.widths.splice(index, 1);\n        this.props.updateText('');\n        this.props.updateHashtags(this.state.hashtags);\n        this.updateView();\n        if ('' === this.state.text && 0 === this.state.hashtags.length) {\n            this.props.onUpdate(true);\n        }\n    }\n\n    public async updateHashtags(event: React.KeyboardEvent<HTMLInputElement>): Promise<void> {\n        if (13 === event.keyCode) {\n            event.preventDefault();\n            // @ts-ignore\n            this.addHashtag((event as KeyboardEvent).target.value);\n        } else if (8 === event.keyCode) {\n            // @ts-ignore\n            if (('' === this.input.current.value && 0 !== this.state.hashtags.length) || 0 === this.input.current.selectionStart) {\n                event.preventDefault();\n                this.deleteHashtags(this.state.hashtags[this.state.hashtags.length - 1]);\n            }\n        }\n        this.updateView();\n    }\n\n    public updateTotalWidth(text: string, hashtagBoxWidth: number): void {\n        this.setState((state, props) => {\n                state.widths[this.state.hashtags.indexOf(text)] = hashtagBoxWidth;\n                return {totalWidth: state.widths.map((width: number) => width).reduce((width: number, nextWidth: number) => width + nextWidth)}\n            },\n            () => (document.getElementById('search') as HTMLInputElement).value = '');\n        this.updateIndent();\n    }\n\n    public renderHashtags(): ReactNode {\n        return this.state.hashtags.map(\n            (hashtag: string) => {\n                return <Hashtag\n                    key={hashtag}\n                    text={hashtag}\n                    updateWidth={this.updateTotalWidth}\n                    isRemovable={true}\n                    remove={this.deleteHashtagByClick}\n                    className={this.props.hashtagClassName}\n                />\n            }\n        );\n    }\n\n    public render(): ReactNode {\n        return (\n            <input id={this.props.id}\n                   className={this.props.className}\n                   type={this.props.type}\n                   onChange={event => this.write(event)}\n                   value={this.state.text}\n                   onKeyDown={this.updateHashtags}\n                   ref={this.input}\n                   placeholder={this.props.placeholder}\n            />\n        );\n    }\n}\n\nexport default HashtagInput;\n"]},"metadata":{},"sourceType":"module"}